!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},t=Error().stack;t&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[t]="7f59252e-4990-4cb3-b33c-d24e6055aa6e",e._sentryDebugIdIdentifier="sentry-dbid-7f59252e-4990-4cb3-b33c-d24e6055aa6e")}catch(e){}}();"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2830],{69251:function(e,t,n){n.d(t,{$i:function(){return ns},$u:function(){return te},HF:function(){return nO},HM:function(){return el},ML:function(){return ti},QL:function(){return eQ},Uw:function(){return ep},WU:function(){return eb},Wr:function(){return e$},Z7:function(){return eT},dt:function(){return eX},fV:function(){return ew},jX:function(){return nH},l4:function(){return as},ly:function(){return tU},p6:function(){return n0},pI:function(){return ta},qB:function(){return t4},rL:function(){return tN},sG:function(){return tQ},sp:function(){return nj},vC:function(){return nZ}});var a,i,r,p,s,o,u,y,d,l,m,c,T=n(79082),b=n(10675),f=n(71765),I=n(24720),h=n(13956),w=n(23394),A=n(84116),x=n(28282),k=n(86736),v=n(14176),g=n(83551),E=n(75190),R=n(16588),O=n(8764),C=n(79014),S=n(98552),B=n(34241),P=n(61469),M=n(28913),q=n(35505),L=n(58464),D=n(78138),N=n(73496),_=n(62208),F=n(98392),U=n(56239),V=n(42578),W=n(40623),K=n(57053),H=n(62860),z=n(99680),G=n(8188),X=n(36187),$=n(60627),Y=n(7765),j=n(46122),Q=n(47757),Z=Object.defineProperty,J=(e,t,n)=>t in e?Z(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,ee=(e,t,n)=>(J(e,"symbol"!=typeof t?t+"":t,n),n),et=[{inputs:[{internalType:"contract IVault",name:"vault",type:"address"},{internalType:"contract IWETH",name:"weth",type:"address"},{internalType:"contract IPermit2",name:"permit2",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"target",type:"address"}],name:"AddressEmptyCode",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"AddressInsufficientBalance",type:"error"},{inputs:[],name:"EthTransfer",type:"error"},{inputs:[],name:"FailedInnerCall",type:"error"},{inputs:[],name:"InsufficientEth",type:"error"},{inputs:[],name:"ReentrancyGuardReentrantCall",type:"error"},{inputs:[{internalType:"uint8",name:"bits",type:"uint8"},{internalType:"uint256",name:"value",type:"uint256"}],name:"SafeCastOverflowedUintDowncast",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"SafeERC20FailedOperation",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"SenderIsNotVault",type:"error"},{inputs:[],name:"SwapDeadline",type:"error"},{inputs:[],name:"TransientIndexOutOfBounds",type:"error"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"enum AddLiquidityKind",name:"kind",type:"uint8"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouterCommon.AddLiquidityHookParams",name:"params",type:"tuple"}],name:"addLiquidityERC4626PoolProportionalHook",outputs:[{internalType:"uint256[]",name:"underlyingAmountsIn",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"enum AddLiquidityKind",name:"kind",type:"uint8"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouterCommon.AddLiquidityHookParams",name:"params",type:"tuple"}],name:"addLiquidityERC4626PoolUnbalancedHook",outputs:[{internalType:"uint256",name:"bptAmountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"maxUnderlyingAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"exactBptAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"addLiquidityProportionalToERC4626Pool",outputs:[{internalType:"uint256[]",name:"underlyingAmountsIn",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"exactUnderlyingAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"addLiquidityUnbalancedToERC4626Pool",outputs:[{internalType:"uint256",name:"bptAmountOut",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[],name:"getSender",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes[]",name:"data",type:"bytes[]"}],name:"multicall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IRouterCommon.PermitApproval[]",name:"permitBatch",type:"tuple[]"},{internalType:"bytes[]",name:"permitSignatures",type:"bytes[]"},{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],internalType:"struct IAllowanceTransfer.PermitDetails[]",name:"details",type:"tuple[]"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"sigDeadline",type:"uint256"}],internalType:"struct IAllowanceTransfer.PermitBatch",name:"permit2Batch",type:"tuple"},{internalType:"bytes",name:"permit2Signature",type:"bytes"},{internalType:"bytes[]",name:"multicallData",type:"bytes[]"}],name:"permitBatchAndCall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountOut",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryAddLiquidityProportionalToERC4626Pool",outputs:[{internalType:"uint256[]",name:"underlyingAmountsIn",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"exactUnderlyingAmountsIn",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryAddLiquidityUnbalancedToERC4626Pool",outputs:[{internalType:"uint256",name:"bptAmountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryRemoveLiquidityProportionalFromERC4626Pool",outputs:[{internalType:"uint256[]",name:"underlyingAmountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bool",name:"isBuffer",type:"bool"}],internalType:"struct IBatchRouter.SwapPathStep[]",name:"steps",type:"tuple[]"},{internalType:"uint256",name:"exactAmountIn",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],internalType:"struct IBatchRouter.SwapPathExactAmountIn[]",name:"paths",type:"tuple[]"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"querySwapExactIn",outputs:[{internalType:"uint256[]",name:"pathAmountsOut",type:"uint256[]"},{internalType:"address[]",name:"tokensOut",type:"address[]"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{components:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bool",name:"isBuffer",type:"bool"}],internalType:"struct IBatchRouter.SwapPathStep[]",name:"steps",type:"tuple[]"},{internalType:"uint256",name:"exactAmountIn",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],internalType:"struct IBatchRouter.SwapPathExactAmountIn[]",name:"paths",type:"tuple[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IBatchRouter.SwapExactInHookParams",name:"params",type:"tuple"}],name:"querySwapExactInHook",outputs:[{internalType:"uint256[]",name:"pathAmountsOut",type:"uint256[]"},{internalType:"address[]",name:"tokensOut",type:"address[]"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bool",name:"isBuffer",type:"bool"}],internalType:"struct IBatchRouter.SwapPathStep[]",name:"steps",type:"tuple[]"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"},{internalType:"uint256",name:"exactAmountOut",type:"uint256"}],internalType:"struct IBatchRouter.SwapPathExactAmountOut[]",name:"paths",type:"tuple[]"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"querySwapExactOut",outputs:[{internalType:"uint256[]",name:"pathAmountsIn",type:"uint256[]"},{internalType:"address[]",name:"tokensIn",type:"address[]"},{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{components:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bool",name:"isBuffer",type:"bool"}],internalType:"struct IBatchRouter.SwapPathStep[]",name:"steps",type:"tuple[]"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"},{internalType:"uint256",name:"exactAmountOut",type:"uint256"}],internalType:"struct IBatchRouter.SwapPathExactAmountOut[]",name:"paths",type:"tuple[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IBatchRouter.SwapExactOutHookParams",name:"params",type:"tuple"}],name:"querySwapExactOutHook",outputs:[{internalType:"uint256[]",name:"pathAmountsIn",type:"uint256[]"},{internalType:"address[]",name:"tokensIn",type:"address[]"},{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"uint256",name:"maxBptAmountIn",type:"uint256"},{internalType:"enum RemoveLiquidityKind",name:"kind",type:"uint8"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouterCommon.RemoveLiquidityHookParams",name:"params",type:"tuple"}],name:"removeLiquidityERC4626PoolProportionalHook",outputs:[{internalType:"uint256[]",name:"underlyingAmountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"minUnderlyingAmountsOut",type:"uint256[]"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"removeLiquidityProportionalFromERC4626Pool",outputs:[{internalType:"uint256[]",name:"underlyingAmountsOut",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bool",name:"isBuffer",type:"bool"}],internalType:"struct IBatchRouter.SwapPathStep[]",name:"steps",type:"tuple[]"},{internalType:"uint256",name:"exactAmountIn",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],internalType:"struct IBatchRouter.SwapPathExactAmountIn[]",name:"paths",type:"tuple[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"swapExactIn",outputs:[{internalType:"uint256[]",name:"pathAmountsOut",type:"uint256[]"},{internalType:"address[]",name:"tokensOut",type:"address[]"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{components:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bool",name:"isBuffer",type:"bool"}],internalType:"struct IBatchRouter.SwapPathStep[]",name:"steps",type:"tuple[]"},{internalType:"uint256",name:"exactAmountIn",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],internalType:"struct IBatchRouter.SwapPathExactAmountIn[]",name:"paths",type:"tuple[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IBatchRouter.SwapExactInHookParams",name:"params",type:"tuple"}],name:"swapExactInHook",outputs:[{internalType:"uint256[]",name:"pathAmountsOut",type:"uint256[]"},{internalType:"address[]",name:"tokensOut",type:"address[]"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bool",name:"isBuffer",type:"bool"}],internalType:"struct IBatchRouter.SwapPathStep[]",name:"steps",type:"tuple[]"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"},{internalType:"uint256",name:"exactAmountOut",type:"uint256"}],internalType:"struct IBatchRouter.SwapPathExactAmountOut[]",name:"paths",type:"tuple[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"swapExactOut",outputs:[{internalType:"uint256[]",name:"pathAmountsIn",type:"uint256[]"},{internalType:"address[]",name:"tokensIn",type:"address[]"},{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{components:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bool",name:"isBuffer",type:"bool"}],internalType:"struct IBatchRouter.SwapPathStep[]",name:"steps",type:"tuple[]"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"},{internalType:"uint256",name:"exactAmountOut",type:"uint256"}],internalType:"struct IBatchRouter.SwapPathExactAmountOut[]",name:"paths",type:"tuple[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IBatchRouter.SwapExactOutHookParams",name:"params",type:"tuple"}],name:"swapExactOutHook",outputs:[{internalType:"uint256[]",name:"pathAmountsIn",type:"uint256[]"},{internalType:"address[]",name:"tokensIn",type:"address[]"},{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],en=[{inputs:[{internalType:"contract IVault",name:"_vault",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"enum IVault.SwapKind",name:"kind",type:"uint8"},{components:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"uint256",name:"assetInIndex",type:"uint256"},{internalType:"uint256",name:"assetOutIndex",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IVault.BatchSwapStep[]",name:"swaps",type:"tuple[]"},{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"bool",name:"fromInternalBalance",type:"bool"},{internalType:"address payable",name:"recipient",type:"address"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.FundManagement",name:"funds",type:"tuple"}],name:"queryBatchSwap",outputs:[{internalType:"int256[]",name:"assetDeltas",type:"int256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.ExitPoolRequest",name:"request",type:"tuple"}],name:"queryExit",outputs:[{internalType:"uint256",name:"bptIn",type:"uint256"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"},{internalType:"bool",name:"fromInternalBalance",type:"bool"}],internalType:"struct IVault.JoinPoolRequest",name:"request",type:"tuple"}],name:"queryJoin",outputs:[{internalType:"uint256",name:"bptOut",type:"uint256"},{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"enum IVault.SwapKind",name:"kind",type:"uint8"},{internalType:"contract IAsset",name:"assetIn",type:"address"},{internalType:"contract IAsset",name:"assetOut",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IVault.SingleSwap",name:"singleSwap",type:"tuple"},{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"bool",name:"fromInternalBalance",type:"bool"},{internalType:"address payable",name:"recipient",type:"address"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.FundManagement",name:"funds",type:"tuple"}],name:"querySwap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"vault",outputs:[{internalType:"contract IVault",name:"",type:"address"}],stateMutability:"view",type:"function"}],ea=[{inputs:[{internalType:"contract IVault",name:"vault",type:"address"},{internalType:"address",name:"libraryAddress",type:"address"},{internalType:"address",name:"queryLibrary",type:"address"},{internalType:"string",name:"version",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"getLibrary",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getQueryLibrary",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getVault",outputs:[{internalType:"contract IVault",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes[]",name:"data",type:"bytes[]"}],name:"multicall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes[]",name:"data",type:"bytes[]"}],name:"vaultActionsQueryMulticall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"version",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],ei=[{inputs:[{internalType:"contract IVault",name:"vault",type:"address"},{internalType:"contract IWETH",name:"weth",type:"address"},{internalType:"contract IPermit2",name:"permit2",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"target",type:"address"}],name:"AddressEmptyCode",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"AddressInsufficientBalance",type:"error"},{inputs:[],name:"EthTransfer",type:"error"},{inputs:[],name:"FailedInnerCall",type:"error"},{inputs:[],name:"InsufficientEth",type:"error"},{inputs:[],name:"ReentrancyGuardReentrantCall",type:"error"},{inputs:[{internalType:"uint8",name:"bits",type:"uint8"},{internalType:"uint256",name:"value",type:"uint256"}],name:"SafeCastOverflowedUintDowncast",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"SafeERC20FailedOperation",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"SenderIsNotVault",type:"error"},{inputs:[],name:"SwapDeadline",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"addLiquidityCustom",outputs:[{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"},{internalType:"uint256",name:"bptAmountOut",type:"uint256"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"enum AddLiquidityKind",name:"kind",type:"uint8"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouterCommon.AddLiquidityHookParams",name:"params",type:"tuple"}],name:"addLiquidityHook",outputs:[{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"},{internalType:"uint256",name:"bptAmountOut",type:"uint256"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"exactBptAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"addLiquidityProportional",outputs:[{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"},{internalType:"uint256",name:"exactBptAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"addLiquiditySingleTokenExactOut",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"uint256",name:"amountUnderlyingRaw",type:"uint256"},{internalType:"uint256",name:"amountWrappedRaw",type:"uint256"}],name:"addLiquidityToBuffer",outputs:[{internalType:"uint256",name:"issuedShares",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"uint256",name:"amountUnderlyingRaw",type:"uint256"},{internalType:"uint256",name:"amountWrappedRaw",type:"uint256"},{internalType:"address",name:"sharesOwner",type:"address"},{internalType:"bool",name:"isBufferInitialized",type:"bool"}],name:"addLiquidityToBufferHook",outputs:[{internalType:"uint256",name:"issuedShares",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"exactAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"addLiquidityUnbalanced",outputs:[{internalType:"uint256",name:"bptAmountOut",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"donate",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"getSender",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{internalType:"uint256[]",name:"exactAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"initialize",outputs:[{internalType:"uint256",name:"bptAmountOut",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"uint256",name:"amountUnderlyingRaw",type:"uint256"},{internalType:"uint256",name:"amountWrappedRaw",type:"uint256"}],name:"initializeBuffer",outputs:[{internalType:"uint256",name:"issuedShares",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{internalType:"uint256[]",name:"exactAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouter.InitializeHookParams",name:"params",type:"tuple"}],name:"initializeHook",outputs:[{internalType:"uint256",name:"bptAmountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes[]",name:"data",type:"bytes[]"}],name:"multicall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IRouterCommon.PermitApproval[]",name:"permitBatch",type:"tuple[]"},{internalType:"bytes[]",name:"permitSignatures",type:"bytes[]"},{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],internalType:"struct IAllowanceTransfer.PermitDetails[]",name:"details",type:"tuple[]"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"sigDeadline",type:"uint256"}],internalType:"struct IAllowanceTransfer.PermitBatch",name:"permit2Batch",type:"tuple"},{internalType:"bytes",name:"permit2Signature",type:"bytes"},{internalType:"bytes[]",name:"multicallData",type:"bytes[]"}],name:"permitBatchAndCall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryAddLiquidityCustom",outputs:[{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"},{internalType:"uint256",name:"bptAmountOut",type:"uint256"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"enum AddLiquidityKind",name:"kind",type:"uint8"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouterCommon.AddLiquidityHookParams",name:"params",type:"tuple"}],name:"queryAddLiquidityHook",outputs:[{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"},{internalType:"uint256",name:"bptAmountOut",type:"uint256"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountOut",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryAddLiquidityProportional",outputs:[{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"uint256",name:"exactBptAmountOut",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryAddLiquiditySingleTokenExactOut",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"exactAmountsIn",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryAddLiquidityUnbalanced",outputs:[{internalType:"uint256",name:"bptAmountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"maxBptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryRemoveLiquidityCustom",outputs:[{internalType:"uint256",name:"bptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"uint256",name:"maxBptAmountIn",type:"uint256"},{internalType:"enum RemoveLiquidityKind",name:"kind",type:"uint8"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouterCommon.RemoveLiquidityHookParams",name:"params",type:"tuple"}],name:"queryRemoveLiquidityHook",outputs:[{internalType:"uint256",name:"bptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryRemoveLiquidityProportional",outputs:[{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"}],name:"queryRemoveLiquidityRecovery",outputs:[{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"}],name:"queryRemoveLiquidityRecoveryHook",outputs:[{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryRemoveLiquiditySingleTokenExactIn",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"exactAmountOut",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"queryRemoveLiquiditySingleTokenExactOut",outputs:[{internalType:"uint256",name:"bptAmountIn",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"enum SwapKind",name:"kind",type:"uint8"},{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amountGiven",type:"uint256"},{internalType:"uint256",name:"limit",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouter.SwapSingleTokenHookParams",name:"params",type:"tuple"}],name:"querySwapHook",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"exactAmountIn",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"querySwapSingleTokenExactIn",outputs:[{internalType:"uint256",name:"amountCalculated",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"exactAmountOut",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"querySwapSingleTokenExactOut",outputs:[{internalType:"uint256",name:"amountCalculated",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"maxBptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"removeLiquidityCustom",outputs:[{internalType:"uint256",name:"bptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"uint256",name:"maxBptAmountIn",type:"uint256"},{internalType:"enum RemoveLiquidityKind",name:"kind",type:"uint8"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouterCommon.RemoveLiquidityHookParams",name:"params",type:"tuple"}],name:"removeLiquidityHook",outputs:[{internalType:"uint256",name:"bptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"removeLiquidityProportional",outputs:[{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"}],name:"removeLiquidityRecovery",outputs:[{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"}],name:"removeLiquidityRecoveryHook",outputs:[{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"minAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"removeLiquiditySingleTokenExactIn",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"uint256",name:"maxBptAmountIn",type:"uint256"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"exactAmountOut",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"removeLiquiditySingleTokenExactOut",outputs:[{internalType:"uint256",name:"bptAmountIn",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"exactAmountIn",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"swapSingleTokenExactIn",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"exactAmountOut",type:"uint256"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"swapSingleTokenExactOut",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"enum SwapKind",name:"kind",type:"uint8"},{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amountGiven",type:"uint256"},{internalType:"uint256",name:"limit",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"wethIsEth",type:"bool"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IRouter.SwapSingleTokenHookParams",name:"params",type:"tuple"}],name:"swapSingleTokenHook",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],er=[{inputs:[{internalType:"contract IVault",name:"vault",type:"address"},{internalType:"contract IERC20",name:"wstETH",type:"address"},{internalType:"contract IBalancerMinter",name:"minter",type:"address"},{internalType:"bool",name:"canCallUserCheckpoint",type:"bool"},{internalType:"string",name:"version",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approveVault",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"enum IVault.SwapKind",name:"kind",type:"uint8"},{components:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"uint256",name:"assetInIndex",type:"uint256"},{internalType:"uint256",name:"assetOutIndex",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IVault.BatchSwapStep[]",name:"swaps",type:"tuple[]"},{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"bool",name:"fromInternalBalance",type:"bool"},{internalType:"address payable",name:"recipient",type:"address"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.FundManagement",name:"funds",type:"tuple"},{internalType:"int256[]",name:"limits",type:"int256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"value",type:"uint256"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"key",type:"uint256"}],internalType:"struct VaultActions.OutputReference[]",name:"outputReferences",type:"tuple[]"}],name:"batchSwap",outputs:[{internalType:"int256[]",name:"results",type:"int256[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"canCallUserCheckpoint",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"enum VaultActions.PoolKind",name:"kind",type:"uint8"},{internalType:"address",name:"sender",type:"address"},{internalType:"address payable",name:"recipient",type:"address"},{components:[{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.ExitPoolRequest",name:"request",type:"tuple"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"key",type:"uint256"}],internalType:"struct VaultActions.OutputReference[]",name:"outputReferences",type:"tuple[]"}],name:"exitPool",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"contract IStakingLiquidityGauge[]",name:"gauges",type:"address[]"}],name:"gaugeCheckpoint",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IStakingLiquidityGauge[]",name:"gauges",type:"address[]"}],name:"gaugeClaimRewards",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IStakingLiquidityGauge",name:"gauge",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"gaugeDeposit",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address[]",name:"gauges",type:"address[]"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"gaugeMint",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bool",name:"approval",type:"bool"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"gaugeSetMinterApproval",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IStakingLiquidityGauge",name:"gauge",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"gaugeWithdraw",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"getEntrypoint",outputs:[{internalType:"contract IBalancerRelayer",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getVault",outputs:[{internalType:"contract IVault",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"enum VaultActions.PoolKind",name:"kind",type:"uint8"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"},{internalType:"bool",name:"fromInternalBalance",type:"bool"}],internalType:"struct IVault.JoinPoolRequest",name:"request",type:"tuple"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"joinPool",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"enum IVault.UserBalanceOpKind",name:"kind",type:"uint8"},{internalType:"contract IAsset",name:"asset",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"sender",type:"address"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct IVault.UserBalanceOp[]",name:"ops",type:"tuple[]"},{internalType:"uint256",name:"value",type:"uint256"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"key",type:"uint256"}],internalType:"struct VaultActions.OutputReference[]",name:"outputReferences",type:"tuple[]"}],name:"manageUserBalance",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"ref",type:"uint256"}],name:"peekChainedReferenceValue",outputs:[{internalType:"uint256",name:"value",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"relayer",type:"address"},{internalType:"bool",name:"approved",type:"bool"},{internalType:"bytes",name:"authorisation",type:"bytes"}],name:"setRelayerApproval",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"stakeETH",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"stakeETHAndWrap",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"enum IVault.SwapKind",name:"kind",type:"uint8"},{internalType:"contract IAsset",name:"assetIn",type:"address"},{internalType:"contract IAsset",name:"assetOut",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IVault.SingleSwap",name:"singleSwap",type:"tuple"},{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"bool",name:"fromInternalBalance",type:"bool"},{internalType:"address payable",name:"recipient",type:"address"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.FundManagement",name:"funds",type:"tuple"},{internalType:"uint256",name:"limit",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"swap",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IStaticATokenLM",name:"staticToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"toUnderlying",type:"bool"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapAaveStaticToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract ICToken",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapCompoundV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapERC4626",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IEulerToken",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapEuler",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IGearboxDieselToken",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"dieselAmount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapGearbox",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IReaperTokenVault",name:"vaultToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapReaperVaultToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IShareToken",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapShareToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract ITetuSmartVault",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapTetu",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IUnbuttonToken",name:"wrapperToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapUnbuttonToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapWstETH",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IYearnTokenVault",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"unwrapYearn",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IERC20Permit",name:"token",type:"address"},{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"vaultPermit",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IERC20PermitDAI",name:"token",type:"address"},{internalType:"address",name:"holder",type:"address"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"expiry",type:"uint256"},{internalType:"bool",name:"allowed",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"vaultPermitDAI",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IStaticATokenLM",name:"staticToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"fromUnderlying",type:"bool"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapAaveDynamicToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract ICToken",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapCompoundV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapERC4626",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IEulerToken",name:"wrappedToken",type:"address"},{internalType:"address",name:"eulerProtocol",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapEuler",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IGearboxDieselToken",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"mainAmount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapGearbox",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IReaperTokenVault",name:"vaultToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapReaperVaultToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IShareToken",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapShareToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapStETH",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract ITetuSmartVault",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapTetu",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IUnbuttonToken",name:"wrapperToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"uAmount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapUnbuttonToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IYearnTokenVault",name:"wrappedToken",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"outputReference",type:"uint256"}],name:"wrapYearn",outputs:[],stateMutability:"payable",type:"function"}],ep=[{inputs:[{internalType:"uint256",name:"deadline",type:"uint256"}],name:"AllowanceExpired",type:"error"},{inputs:[],name:"ExcessiveInvalidation",type:"error"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"InsufficientAllowance",type:"error"},{inputs:[{internalType:"uint256",name:"maxAmount",type:"uint256"}],name:"InvalidAmount",type:"error"},{inputs:[],name:"InvalidContractSignature",type:"error"},{inputs:[],name:"InvalidNonce",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSignatureLength",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"LengthMismatch",type:"error"},{inputs:[{internalType:"uint256",name:"signatureDeadline",type:"uint256"}],name:"SignatureExpired",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint160",name:"amount",type:"uint160"},{indexed:!1,internalType:"uint48",name:"expiration",type:"uint48"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"address",name:"spender",type:"address"}],name:"Lockdown",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint48",name:"newNonce",type:"uint48"},{indexed:!1,internalType:"uint48",name:"oldNonce",type:"uint48"}],name:"NonceInvalidation",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint160",name:"amount",type:"uint160"},{indexed:!1,internalType:"uint48",name:"expiration",type:"uint48"},{indexed:!1,internalType:"uint48",name:"nonce",type:"uint48"}],name:"Permit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"word",type:"uint256"},{indexed:!1,internalType:"uint256",name:"mask",type:"uint256"}],name:"UnorderedNonceInvalidation",type:"event"},{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"allowance",outputs:[{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint48",name:"newNonce",type:"uint48"}],name:"invalidateNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"wordPos",type:"uint256"},{internalType:"uint256",name:"mask",type:"uint256"}],name:"invalidateUnorderedNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"}],internalType:"struct IAllowanceTransfer.TokenSpenderPair[]",name:"approvals",type:"tuple[]"}],name:"lockdown",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"nonceBitmap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],internalType:"struct IAllowanceTransfer.PermitDetails[]",name:"details",type:"tuple[]"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"sigDeadline",type:"uint256"}],internalType:"struct IAllowanceTransfer.PermitBatch",name:"permitBatch",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],internalType:"struct IAllowanceTransfer.PermitDetails",name:"details",type:"tuple"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"sigDeadline",type:"uint256"}],internalType:"struct IAllowanceTransfer.PermitSingle",name:"permitSingle",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions",name:"permitted",type:"tuple"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitTransferFrom",name:"permit",type:"tuple"},{components:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"}],internalType:"struct ISignatureTransfer.SignatureTransferDetails",name:"transferDetails",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions[]",name:"permitted",type:"tuple[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitBatchTransferFrom",name:"permit",type:"tuple"},{components:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"}],internalType:"struct ISignatureTransfer.SignatureTransferDetails[]",name:"transferDetails",type:"tuple[]"},{internalType:"address",name:"owner",type:"address"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions",name:"permitted",type:"tuple"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitTransferFrom",name:"permit",type:"tuple"},{components:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"}],internalType:"struct ISignatureTransfer.SignatureTransferDetails",name:"transferDetails",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{internalType:"bytes32",name:"witness",type:"bytes32"},{internalType:"string",name:"witnessTypeString",type:"string"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitWitnessTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions[]",name:"permitted",type:"tuple[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitBatchTransferFrom",name:"permit",type:"tuple"},{components:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"}],internalType:"struct ISignatureTransfer.SignatureTransferDetails[]",name:"transferDetails",type:"tuple[]"},{internalType:"address",name:"owner",type:"address"},{internalType:"bytes32",name:"witness",type:"bytes32"},{internalType:"string",name:"witnessTypeString",type:"string"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitWitnessTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"address",name:"token",type:"address"}],internalType:"struct IAllowanceTransfer.AllowanceTransferDetails[]",name:"transferDetails",type:"tuple[]"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"address",name:"token",type:"address"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"}],es=[{inputs:[{internalType:"contract IAuthorizer",name:"authorizer",type:"address"},{internalType:"contract IWETH",name:"weth",type:"address"},{internalType:"uint256",name:"pauseWindowDuration",type:"uint256"},{internalType:"uint256",name:"bufferPeriodDuration",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IAuthorizer",name:"newAuthorizer",type:"address"}],name:"AuthorizerChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"ExternalBalanceTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IFlashLoanRecipient",name:"recipient",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"feeAmount",type:"uint256"}],name:"FlashLoan",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"int256",name:"delta",type:"int256"}],name:"InternalBalanceChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"paused",type:"bool"}],name:"PausedStateChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"poolId",type:"bytes32"},{indexed:!0,internalType:"address",name:"liquidityProvider",type:"address"},{indexed:!1,internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{indexed:!1,internalType:"int256[]",name:"deltas",type:"int256[]"},{indexed:!1,internalType:"uint256[]",name:"protocolFeeAmounts",type:"uint256[]"}],name:"PoolBalanceChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"poolId",type:"bytes32"},{indexed:!0,internalType:"address",name:"assetManager",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"int256",name:"cashDelta",type:"int256"},{indexed:!1,internalType:"int256",name:"managedDelta",type:"int256"}],name:"PoolBalanceManaged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"poolId",type:"bytes32"},{indexed:!0,internalType:"address",name:"poolAddress",type:"address"},{indexed:!1,internalType:"enum IVault.PoolSpecialization",name:"specialization",type:"uint8"}],name:"PoolRegistered",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"relayer",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"RelayerApprovalChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"poolId",type:"bytes32"},{indexed:!0,internalType:"contract IERC20",name:"tokenIn",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"tokenOut",type:"address"},{indexed:!1,internalType:"uint256",name:"amountIn",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountOut",type:"uint256"}],name:"Swap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"poolId",type:"bytes32"},{indexed:!1,internalType:"contract IERC20[]",name:"tokens",type:"address[]"}],name:"TokensDeregistered",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"poolId",type:"bytes32"},{indexed:!1,internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{indexed:!1,internalType:"address[]",name:"assetManagers",type:"address[]"}],name:"TokensRegistered",type:"event"},{inputs:[],name:"WETH",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"enum IVault.SwapKind",name:"kind",type:"uint8"},{components:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"uint256",name:"assetInIndex",type:"uint256"},{internalType:"uint256",name:"assetOutIndex",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IVault.BatchSwapStep[]",name:"swaps",type:"tuple[]"},{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"bool",name:"fromInternalBalance",type:"bool"},{internalType:"address payable",name:"recipient",type:"address"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.FundManagement",name:"funds",type:"tuple"},{internalType:"int256[]",name:"limits",type:"int256[]"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"batchSwap",outputs:[{internalType:"int256[]",name:"assetDeltas",type:"int256[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"contract IERC20[]",name:"tokens",type:"address[]"}],name:"deregisterTokens",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"address",name:"sender",type:"address"},{internalType:"address payable",name:"recipient",type:"address"},{components:[{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.ExitPoolRequest",name:"request",type:"tuple"}],name:"exitPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IFlashLoanRecipient",name:"recipient",type:"address"},{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"flashLoan",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"selector",type:"bytes4"}],name:"getActionId",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"getAuthorizer",outputs:[{internalType:"contract IAuthorizer",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getDomainSeparator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"contract IERC20[]",name:"tokens",type:"address[]"}],name:"getInternalBalance",outputs:[{internalType:"uint256[]",name:"balances",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNextNonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getPausedState",outputs:[{internalType:"bool",name:"paused",type:"bool"},{internalType:"uint256",name:"pauseWindowEndTime",type:"uint256"},{internalType:"uint256",name:"bufferPeriodEndTime",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"}],name:"getPool",outputs:[{internalType:"address",name:"",type:"address"},{internalType:"enum IVault.PoolSpecialization",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"contract IERC20",name:"token",type:"address"}],name:"getPoolTokenInfo",outputs:[{internalType:"uint256",name:"cash",type:"uint256"},{internalType:"uint256",name:"managed",type:"uint256"},{internalType:"uint256",name:"lastChangeBlock",type:"uint256"},{internalType:"address",name:"assetManager",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"}],name:"getPoolTokens",outputs:[{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{internalType:"uint256[]",name:"balances",type:"uint256[]"},{internalType:"uint256",name:"lastChangeBlock",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getProtocolFeesCollector",outputs:[{internalType:"contract ProtocolFeesCollector",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"address",name:"relayer",type:"address"}],name:"hasApprovedRelayer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"bytes",name:"userData",type:"bytes"},{internalType:"bool",name:"fromInternalBalance",type:"bool"}],internalType:"struct IVault.JoinPoolRequest",name:"request",type:"tuple"}],name:"joinPool",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"enum IVault.PoolBalanceOpKind",name:"kind",type:"uint8"},{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct IVault.PoolBalanceOp[]",name:"ops",type:"tuple[]"}],name:"managePoolBalance",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"enum IVault.UserBalanceOpKind",name:"kind",type:"uint8"},{internalType:"contract IAsset",name:"asset",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"sender",type:"address"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct IVault.UserBalanceOp[]",name:"ops",type:"tuple[]"}],name:"manageUserBalance",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"enum IVault.SwapKind",name:"kind",type:"uint8"},{components:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"uint256",name:"assetInIndex",type:"uint256"},{internalType:"uint256",name:"assetOutIndex",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IVault.BatchSwapStep[]",name:"swaps",type:"tuple[]"},{internalType:"contract IAsset[]",name:"assets",type:"address[]"},{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"bool",name:"fromInternalBalance",type:"bool"},{internalType:"address payable",name:"recipient",type:"address"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.FundManagement",name:"funds",type:"tuple"}],name:"queryBatchSwap",outputs:[{internalType:"int256[]",name:"",type:"int256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"enum IVault.PoolSpecialization",name:"specialization",type:"uint8"}],name:"registerPool",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{internalType:"address[]",name:"assetManagers",type:"address[]"}],name:"registerTokens",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IAuthorizer",name:"newAuthorizer",type:"address"}],name:"setAuthorizer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"paused",type:"bool"}],name:"setPaused",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"relayer",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setRelayerApproval",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"bytes32",name:"poolId",type:"bytes32"},{internalType:"enum IVault.SwapKind",name:"kind",type:"uint8"},{internalType:"contract IAsset",name:"assetIn",type:"address"},{internalType:"contract IAsset",name:"assetOut",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct IVault.SingleSwap",name:"singleSwap",type:"tuple"},{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"bool",name:"fromInternalBalance",type:"bool"},{internalType:"address payable",name:"recipient",type:"address"},{internalType:"bool",name:"toInternalBalance",type:"bool"}],internalType:"struct IVault.FundManagement",name:"funds",type:"tuple"},{internalType:"uint256",name:"limit",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swap",outputs:[{internalType:"uint256",name:"amountCalculated",type:"uint256"}],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}],eo=[{inputs:[{internalType:"contract IVaultExtension",name:"vaultExtension",type:"address"},{internalType:"contract IAuthorizer",name:"authorizer",type:"address"},{internalType:"contract IProtocolFeeController",name:"protocolFeeController",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"target",type:"address"}],name:"AddressEmptyCode",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"AddressInsufficientBalance",type:"error"},{inputs:[],name:"AfterAddLiquidityHookFailed",type:"error"},{inputs:[],name:"AfterInitializeHookFailed",type:"error"},{inputs:[],name:"AfterRemoveLiquidityHookFailed",type:"error"},{inputs:[],name:"AfterSwapHookFailed",type:"error"},{inputs:[],name:"AllZeroInputs",type:"error"},{inputs:[],name:"AmountGivenZero",type:"error"},{inputs:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"}],name:"AmountInAboveMax",type:"error"},{inputs:[{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],name:"AmountOutBelowMin",type:"error"},{inputs:[],name:"BalanceNotSettled",type:"error"},{inputs:[],name:"BalanceOverflow",type:"error"},{inputs:[],name:"BeforeAddLiquidityHookFailed",type:"error"},{inputs:[],name:"BeforeInitializeHookFailed",type:"error"},{inputs:[],name:"BeforeRemoveLiquidityHookFailed",type:"error"},{inputs:[],name:"BeforeSwapHookFailed",type:"error"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"}],name:"BptAmountInAboveMax",type:"error"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],name:"BptAmountOutBelowMin",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"}],name:"BufferAlreadyInitialized",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"}],name:"BufferNotInitialized",type:"error"},{inputs:[],name:"BufferSharesInvalidOwner",type:"error"},{inputs:[],name:"BufferSharesInvalidReceiver",type:"error"},{inputs:[{internalType:"uint256",name:"totalSupply",type:"uint256"}],name:"BufferTotalSupplyTooLow",type:"error"},{inputs:[],name:"CannotReceiveEth",type:"error"},{inputs:[],name:"CannotSwapSameToken",type:"error"},{inputs:[],name:"DoesNotSupportAddLiquidityCustom",type:"error"},{inputs:[],name:"DoesNotSupportDonation",type:"error"},{inputs:[],name:"DoesNotSupportRemoveLiquidityCustom",type:"error"},{inputs:[],name:"DoesNotSupportUnbalancedLiquidity",type:"error"},{inputs:[],name:"DynamicSwapFeeHookFailed",type:"error"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"allowance",type:"uint256"},{internalType:"uint256",name:"needed",type:"uint256"}],name:"ERC20InsufficientAllowance",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"balance",type:"uint256"},{internalType:"uint256",name:"needed",type:"uint256"}],name:"ERC20InsufficientBalance",type:"error"},{inputs:[{internalType:"address",name:"approver",type:"address"}],name:"ERC20InvalidApprover",type:"error"},{inputs:[{internalType:"address",name:"receiver",type:"address"}],name:"ERC20InvalidReceiver",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"ERC20InvalidSender",type:"error"},{inputs:[{internalType:"address",name:"spender",type:"address"}],name:"ERC20InvalidSpender",type:"error"},{inputs:[],name:"FailedInnerCall",type:"error"},{inputs:[],name:"FeePrecisionTooHigh",type:"error"},{inputs:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"}],name:"HookAdjustedAmountInAboveMax",type:"error"},{inputs:[{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],name:"HookAdjustedAmountOutBelowMin",type:"error"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"limit",type:"uint256"}],name:"HookAdjustedSwapLimit",type:"error"},{inputs:[{internalType:"address",name:"poolHooksContract",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"poolFactory",type:"address"}],name:"HookRegistrationFailed",type:"error"},{inputs:[],name:"InputLengthMismatch",type:"error"},{inputs:[],name:"InvalidAddLiquidityKind",type:"error"},{inputs:[],name:"InvalidRemoveLiquidityKind",type:"error"},{inputs:[],name:"InvalidToken",type:"error"},{inputs:[],name:"InvalidTokenConfiguration",type:"error"},{inputs:[],name:"InvalidTokenType",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"}],name:"InvalidUnderlyingToken",type:"error"},{inputs:[{internalType:"uint256",name:"invariantRatio",type:"uint256"},{internalType:"uint256",name:"maxInvariantRatio",type:"uint256"}],name:"InvariantRatioAboveMax",type:"error"},{inputs:[{internalType:"uint256",name:"invariantRatio",type:"uint256"},{internalType:"uint256",name:"minInvariantRatio",type:"uint256"}],name:"InvariantRatioBelowMin",type:"error"},{inputs:[],name:"MaxTokens",type:"error"},{inputs:[],name:"MinTokens",type:"error"},{inputs:[],name:"MultipleNonZeroInputs",type:"error"},{inputs:[],name:"NotEnoughBufferShares",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"uint256",name:"expectedUnderlyingAmount",type:"uint256"},{internalType:"uint256",name:"actualUnderlyingAmount",type:"uint256"}],name:"NotEnoughUnderlying",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"uint256",name:"expectedWrappedAmount",type:"uint256"},{internalType:"uint256",name:"actualWrappedAmount",type:"uint256"}],name:"NotEnoughWrapped",type:"error"},{inputs:[],name:"NotStaticCall",type:"error"},{inputs:[],name:"NotVaultDelegateCall",type:"error"},{inputs:[],name:"PauseBufferPeriodDurationTooLarge",type:"error"},{inputs:[],name:"PercentageAboveMax",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolAlreadyInitialized",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolAlreadyRegistered",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolInRecoveryMode",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolNotInRecoveryMode",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolNotInitialized",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolNotPaused",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolNotRegistered",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolPauseWindowExpired",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolPaused",type:"error"},{inputs:[{internalType:"uint256",name:"totalSupply",type:"uint256"}],name:"PoolTotalSupplyTooLow",type:"error"},{inputs:[],name:"ProtocolFeesExceedTotalCollected",type:"error"},{inputs:[],name:"QueriesDisabled",type:"error"},{inputs:[],name:"QuoteResultSpoofed",type:"error"},{inputs:[],name:"ReentrancyGuardReentrantCall",type:"error"},{inputs:[],name:"RouterNotTrusted",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"SafeCastOverflowedUintToInt",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"SafeERC20FailedOperation",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"SenderIsNotVault",type:"error"},{inputs:[],name:"SwapFeePercentageTooHigh",type:"error"},{inputs:[],name:"SwapFeePercentageTooLow",type:"error"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"limit",type:"uint256"}],name:"SwapLimit",type:"error"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"}],name:"TokenAlreadyRegistered",type:"error"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"}],name:"TokenNotRegistered",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"expectedToken",type:"address"},{internalType:"address",name:"actualToken",type:"address"}],name:"TokensMismatch",type:"error"},{inputs:[],name:"TradeAmountTooSmall",type:"error"},{inputs:[],name:"VaultBuffersArePaused",type:"error"},{inputs:[],name:"VaultIsNotUnlocked",type:"error"},{inputs:[],name:"VaultNotPaused",type:"error"},{inputs:[],name:"VaultPauseWindowDurationTooLarge",type:"error"},{inputs:[],name:"VaultPauseWindowExpired",type:"error"},{inputs:[],name:"VaultPaused",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"}],name:"WrapAmountTooSmall",type:"error"},{inputs:[],name:"WrongProtocolFeeControllerDeployment",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"address",name:"underlyingToken",type:"address"}],name:"WrongUnderlyingToken",type:"error"},{inputs:[],name:"WrongVaultAdminDeployment",type:"error"},{inputs:[],name:"WrongVaultExtensionDeployment",type:"error"},{inputs:[],name:"ZeroDivision",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IAuthorizer",name:"newAuthorizer",type:"address"}],name:"AuthorizerChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!1,internalType:"uint256",name:"burnedShares",type:"uint256"}],name:"BufferSharesBurned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"issuedShares",type:"uint256"}],name:"BufferSharesMinted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amountUnderlying",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountWrapped",type:"uint256"}],name:"LiquidityAddedToBuffer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amountUnderlying",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountWrapped",type:"uint256"}],name:"LiquidityRemovedFromBuffer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"address",name:"liquidityProvider",type:"address"},{indexed:!1,internalType:"int256[]",name:"deltas",type:"int256[]"}],name:"PoolBalanceChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"}],name:"PoolInitialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!1,internalType:"bool",name:"paused",type:"bool"}],name:"PoolPausedStateChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!1,internalType:"bool",name:"recoveryMode",type:"bool"}],name:"PoolRecoveryModeStateChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"address",name:"factory",type:"address"},{components:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"enum TokenType",name:"tokenType",type:"uint8"},{internalType:"contract IRateProvider",name:"rateProvider",type:"address"},{internalType:"bool",name:"paysYieldFees",type:"bool"}],indexed:!1,internalType:"struct TokenConfig[]",name:"tokenConfig",type:"tuple[]"},{indexed:!1,internalType:"uint256",name:"swapFeePercentage",type:"uint256"},{indexed:!1,internalType:"uint32",name:"pauseWindowEndTime",type:"uint32"},{components:[{internalType:"address",name:"pauseManager",type:"address"},{internalType:"address",name:"swapFeeManager",type:"address"},{internalType:"address",name:"poolCreator",type:"address"}],indexed:!1,internalType:"struct PoolRoleAccounts",name:"roleAccounts",type:"tuple"},{components:[{internalType:"bool",name:"enableHookAdjustedAmounts",type:"bool"},{internalType:"bool",name:"shouldCallBeforeInitialize",type:"bool"},{internalType:"bool",name:"shouldCallAfterInitialize",type:"bool"},{internalType:"bool",name:"shouldCallComputeDynamicSwapFee",type:"bool"},{internalType:"bool",name:"shouldCallBeforeSwap",type:"bool"},{internalType:"bool",name:"shouldCallAfterSwap",type:"bool"},{internalType:"bool",name:"shouldCallBeforeAddLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallAfterAddLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallBeforeRemoveLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallAfterRemoveLiquidity",type:"bool"},{internalType:"address",name:"hooksContract",type:"address"}],indexed:!1,internalType:"struct HooksConfig",name:"hooksConfig",type:"tuple"},{components:[{internalType:"bool",name:"disableUnbalancedLiquidity",type:"bool"},{internalType:"bool",name:"enableAddLiquidityCustom",type:"bool"},{internalType:"bool",name:"enableRemoveLiquidityCustom",type:"bool"},{internalType:"bool",name:"enableDonation",type:"bool"}],indexed:!1,internalType:"struct LiquidityManagement",name:"liquidityManagement",type:"tuple"}],name:"PoolRegistered",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IProtocolFeeController",name:"newProtocolFeeController",type:"address"}],name:"ProtocolFeeControllerChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"tokenIn",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"tokenOut",type:"address"},{indexed:!1,internalType:"uint256",name:"amountIn",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountOut",type:"uint256"},{indexed:!1,internalType:"uint256",name:"swapFeePercentage",type:"uint256"},{indexed:!1,internalType:"uint256",name:"swapFeeAmount",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"swapFeeToken",type:"address"}],name:"Swap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!1,internalType:"uint256",name:"swapFeePercentage",type:"uint256"}],name:"SwapFeePercentageChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"underlyingToken",type:"address"},{indexed:!1,internalType:"uint256",name:"burnedShares",type:"uint256"},{indexed:!1,internalType:"uint256",name:"withdrawnUnderlying",type:"uint256"}],name:"Unwrap",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"paused",type:"bool"}],name:"VaultBuffersPausedStateChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"paused",type:"bool"}],name:"VaultPausedStateChanged",type:"event"},{anonymous:!1,inputs:[],name:"VaultQueriesDisabled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC20",name:"underlyingToken",type:"address"},{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!1,internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{indexed:!1,internalType:"uint256",name:"mintedShares",type:"uint256"}],name:"Wrap",type:"event"},{stateMutability:"payable",type:"fallback"},{inputs:[{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"maxAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"enum AddLiquidityKind",name:"kind",type:"uint8"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct AddLiquidityParams",name:"params",type:"tuple"}],name:"addLiquidity",outputs:[{internalType:"uint256[]",name:"amountsIn",type:"uint256[]"},{internalType:"uint256",name:"bptAmountOut",type:"uint256"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"enum SwapKind",name:"kind",type:"uint8"},{internalType:"enum WrappingDirection",name:"direction",type:"uint8"},{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"uint256",name:"amountGivenRaw",type:"uint256"},{internalType:"uint256",name:"limitRaw",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct BufferWrapOrUnwrapParams",name:"params",type:"tuple"}],name:"erc4626BufferWrapOrUnwrap",outputs:[{internalType:"uint256",name:"amountCalculatedRaw",type:"uint256"},{internalType:"uint256",name:"amountInRaw",type:"uint256"},{internalType:"uint256",name:"amountOutRaw",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getAuthorizer",outputs:[{internalType:"contract IAuthorizer",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"token",type:"address"}],name:"getPoolTokenCountAndIndexOfToken",outputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getVaultExtension",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"reentrancyGuardEntered",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"maxBptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"minAmountsOut",type:"uint256[]"},{internalType:"enum RemoveLiquidityKind",name:"kind",type:"uint8"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct RemoveLiquidityParams",name:"params",type:"tuple"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"bptAmountIn",type:"uint256"},{internalType:"uint256[]",name:"amountsOut",type:"uint256[]"},{internalType:"bytes",name:"returnData",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"sendTo",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amountHint",type:"uint256"}],name:"settle",outputs:[{internalType:"uint256",name:"credit",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"enum SwapKind",name:"kind",type:"uint8"},{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amountGivenRaw",type:"uint256"},{internalType:"uint256",name:"limitRaw",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct VaultSwapParams",name:"vaultSwapParams",type:"tuple"}],name:"swap",outputs:[{internalType:"uint256",name:"amountCalculated",type:"uint256"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"data",type:"bytes"}],name:"unlock",outputs:[{internalType:"bytes",name:"result",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],eu=[{inputs:[{internalType:"contract IVault",name:"mainVault",type:"address"},{internalType:"contract IVaultAdmin",name:"vaultAdmin",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"target",type:"address"}],name:"AddressEmptyCode",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"AddressInsufficientBalance",type:"error"},{inputs:[],name:"AfterAddLiquidityHookFailed",type:"error"},{inputs:[],name:"AfterInitializeHookFailed",type:"error"},{inputs:[],name:"AfterRemoveLiquidityHookFailed",type:"error"},{inputs:[],name:"AfterSwapHookFailed",type:"error"},{inputs:[],name:"AmountGivenZero",type:"error"},{inputs:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"}],name:"AmountInAboveMax",type:"error"},{inputs:[{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],name:"AmountOutBelowMin",type:"error"},{inputs:[],name:"BalanceNotSettled",type:"error"},{inputs:[],name:"BalanceOverflow",type:"error"},{inputs:[],name:"BeforeAddLiquidityHookFailed",type:"error"},{inputs:[],name:"BeforeInitializeHookFailed",type:"error"},{inputs:[],name:"BeforeRemoveLiquidityHookFailed",type:"error"},{inputs:[],name:"BeforeSwapHookFailed",type:"error"},{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"}],name:"BptAmountInAboveMax",type:"error"},{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],name:"BptAmountOutBelowMin",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"}],name:"BufferAlreadyInitialized",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"}],name:"BufferNotInitialized",type:"error"},{inputs:[],name:"BufferSharesInvalidOwner",type:"error"},{inputs:[],name:"BufferSharesInvalidReceiver",type:"error"},{inputs:[{internalType:"uint256",name:"totalSupply",type:"uint256"}],name:"BufferTotalSupplyTooLow",type:"error"},{inputs:[],name:"CannotReceiveEth",type:"error"},{inputs:[],name:"CannotSwapSameToken",type:"error"},{inputs:[],name:"CodecOverflow",type:"error"},{inputs:[],name:"DoesNotSupportAddLiquidityCustom",type:"error"},{inputs:[],name:"DoesNotSupportDonation",type:"error"},{inputs:[],name:"DoesNotSupportRemoveLiquidityCustom",type:"error"},{inputs:[],name:"DoesNotSupportUnbalancedLiquidity",type:"error"},{inputs:[],name:"DynamicSwapFeeHookFailed",type:"error"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"allowance",type:"uint256"},{internalType:"uint256",name:"needed",type:"uint256"}],name:"ERC20InsufficientAllowance",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"balance",type:"uint256"},{internalType:"uint256",name:"needed",type:"uint256"}],name:"ERC20InsufficientBalance",type:"error"},{inputs:[{internalType:"address",name:"approver",type:"address"}],name:"ERC20InvalidApprover",type:"error"},{inputs:[{internalType:"address",name:"receiver",type:"address"}],name:"ERC20InvalidReceiver",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"ERC20InvalidSender",type:"error"},{inputs:[{internalType:"address",name:"spender",type:"address"}],name:"ERC20InvalidSpender",type:"error"},{inputs:[],name:"ErrorSelectorNotFound",type:"error"},{inputs:[],name:"FailedInnerCall",type:"error"},{inputs:[],name:"FeePrecisionTooHigh",type:"error"},{inputs:[{internalType:"contract IERC20",name:"tokenIn",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"maxAmountIn",type:"uint256"}],name:"HookAdjustedAmountInAboveMax",type:"error"},{inputs:[{internalType:"contract IERC20",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"minAmountOut",type:"uint256"}],name:"HookAdjustedAmountOutBelowMin",type:"error"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"limit",type:"uint256"}],name:"HookAdjustedSwapLimit",type:"error"},{inputs:[{internalType:"address",name:"poolHooksContract",type:"address"},{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"poolFactory",type:"address"}],name:"HookRegistrationFailed",type:"error"},{inputs:[],name:"InputLengthMismatch",type:"error"},{inputs:[],name:"InvalidAddLiquidityKind",type:"error"},{inputs:[],name:"InvalidRemoveLiquidityKind",type:"error"},{inputs:[],name:"InvalidToken",type:"error"},{inputs:[],name:"InvalidTokenConfiguration",type:"error"},{inputs:[],name:"InvalidTokenType",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"}],name:"InvalidUnderlyingToken",type:"error"},{inputs:[],name:"MaxTokens",type:"error"},{inputs:[],name:"MinTokens",type:"error"},{inputs:[],name:"NotEnoughBufferShares",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"uint256",name:"expectedUnderlyingAmount",type:"uint256"},{internalType:"uint256",name:"actualUnderlyingAmount",type:"uint256"}],name:"NotEnoughUnderlying",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"uint256",name:"expectedWrappedAmount",type:"uint256"},{internalType:"uint256",name:"actualWrappedAmount",type:"uint256"}],name:"NotEnoughWrapped",type:"error"},{inputs:[],name:"NotStaticCall",type:"error"},{inputs:[],name:"NotVaultDelegateCall",type:"error"},{inputs:[],name:"OutOfBounds",type:"error"},{inputs:[],name:"PauseBufferPeriodDurationTooLarge",type:"error"},{inputs:[],name:"PercentageAboveMax",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolAlreadyInitialized",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolAlreadyRegistered",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolInRecoveryMode",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolNotInRecoveryMode",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolNotInitialized",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolNotPaused",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolNotRegistered",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolPauseWindowExpired",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"PoolPaused",type:"error"},{inputs:[{internalType:"uint256",name:"totalSupply",type:"uint256"}],name:"PoolTotalSupplyTooLow",type:"error"},{inputs:[],name:"ProtocolFeesExceedTotalCollected",type:"error"},{inputs:[],name:"QueriesDisabled",type:"error"},{inputs:[],name:"QuoteResultSpoofed",type:"error"},{inputs:[],name:"ReentrancyGuardReentrantCall",type:"error"},{inputs:[{internalType:"bytes",name:"result",type:"bytes"}],name:"Result",type:"error"},{inputs:[],name:"RouterNotTrusted",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"SafeCastOverflowedUintToInt",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"SenderIsNotVault",type:"error"},{inputs:[],name:"SwapFeePercentageTooHigh",type:"error"},{inputs:[],name:"SwapFeePercentageTooLow",type:"error"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"limit",type:"uint256"}],name:"SwapLimit",type:"error"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"}],name:"TokenAlreadyRegistered",type:"error"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"}],name:"TokenNotRegistered",type:"error"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"expectedToken",type:"address"},{internalType:"address",name:"actualToken",type:"address"}],name:"TokensMismatch",type:"error"},{inputs:[],name:"TokensNotSorted",type:"error"},{inputs:[],name:"TradeAmountTooSmall",type:"error"},{inputs:[],name:"VaultBuffersArePaused",type:"error"},{inputs:[],name:"VaultIsNotUnlocked",type:"error"},{inputs:[],name:"VaultNotPaused",type:"error"},{inputs:[],name:"VaultPauseWindowDurationTooLarge",type:"error"},{inputs:[],name:"VaultPauseWindowExpired",type:"error"},{inputs:[],name:"VaultPaused",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"}],name:"WrapAmountTooSmall",type:"error"},{inputs:[],name:"WrongProtocolFeeControllerDeployment",type:"error"},{inputs:[{internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{internalType:"address",name:"underlyingToken",type:"address"}],name:"WrongUnderlyingToken",type:"error"},{inputs:[],name:"WrongVaultAdminDeployment",type:"error"},{inputs:[],name:"WrongVaultExtensionDeployment",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IAuthorizer",name:"newAuthorizer",type:"address"}],name:"AuthorizerChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!1,internalType:"uint256",name:"burnedShares",type:"uint256"}],name:"BufferSharesBurned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"issuedShares",type:"uint256"}],name:"BufferSharesMinted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amountUnderlying",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountWrapped",type:"uint256"}],name:"LiquidityAddedToBuffer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amountUnderlying",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountWrapped",type:"uint256"}],name:"LiquidityRemovedFromBuffer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"address",name:"liquidityProvider",type:"address"},{indexed:!1,internalType:"int256[]",name:"deltas",type:"int256[]"}],name:"PoolBalanceChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"}],name:"PoolInitialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!1,internalType:"bool",name:"paused",type:"bool"}],name:"PoolPausedStateChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!1,internalType:"bool",name:"recoveryMode",type:"bool"}],name:"PoolRecoveryModeStateChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"address",name:"factory",type:"address"},{components:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"enum TokenType",name:"tokenType",type:"uint8"},{internalType:"contract IRateProvider",name:"rateProvider",type:"address"},{internalType:"bool",name:"paysYieldFees",type:"bool"}],indexed:!1,internalType:"struct TokenConfig[]",name:"tokenConfig",type:"tuple[]"},{indexed:!1,internalType:"uint256",name:"swapFeePercentage",type:"uint256"},{indexed:!1,internalType:"uint32",name:"pauseWindowEndTime",type:"uint32"},{components:[{internalType:"address",name:"pauseManager",type:"address"},{internalType:"address",name:"swapFeeManager",type:"address"},{internalType:"address",name:"poolCreator",type:"address"}],indexed:!1,internalType:"struct PoolRoleAccounts",name:"roleAccounts",type:"tuple"},{components:[{internalType:"bool",name:"enableHookAdjustedAmounts",type:"bool"},{internalType:"bool",name:"shouldCallBeforeInitialize",type:"bool"},{internalType:"bool",name:"shouldCallAfterInitialize",type:"bool"},{internalType:"bool",name:"shouldCallComputeDynamicSwapFee",type:"bool"},{internalType:"bool",name:"shouldCallBeforeSwap",type:"bool"},{internalType:"bool",name:"shouldCallAfterSwap",type:"bool"},{internalType:"bool",name:"shouldCallBeforeAddLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallAfterAddLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallBeforeRemoveLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallAfterRemoveLiquidity",type:"bool"},{internalType:"address",name:"hooksContract",type:"address"}],indexed:!1,internalType:"struct HooksConfig",name:"hooksConfig",type:"tuple"},{components:[{internalType:"bool",name:"disableUnbalancedLiquidity",type:"bool"},{internalType:"bool",name:"enableAddLiquidityCustom",type:"bool"},{internalType:"bool",name:"enableRemoveLiquidityCustom",type:"bool"},{internalType:"bool",name:"enableDonation",type:"bool"}],indexed:!1,internalType:"struct LiquidityManagement",name:"liquidityManagement",type:"tuple"}],name:"PoolRegistered",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IProtocolFeeController",name:"newProtocolFeeController",type:"address"}],name:"ProtocolFeeControllerChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"tokenIn",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"tokenOut",type:"address"},{indexed:!1,internalType:"uint256",name:"amountIn",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountOut",type:"uint256"},{indexed:!1,internalType:"uint256",name:"swapFeePercentage",type:"uint256"},{indexed:!1,internalType:"uint256",name:"swapFeeAmount",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"swapFeeToken",type:"address"}],name:"Swap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!1,internalType:"uint256",name:"swapFeePercentage",type:"uint256"}],name:"SwapFeePercentageChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pool",type:"address"},{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"underlyingToken",type:"address"},{indexed:!1,internalType:"uint256",name:"burnedShares",type:"uint256"},{indexed:!1,internalType:"uint256",name:"withdrawnUnderlying",type:"uint256"}],name:"Unwrap",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"paused",type:"bool"}],name:"VaultBuffersPausedStateChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"paused",type:"bool"}],name:"VaultPausedStateChanged",type:"event"},{anonymous:!1,inputs:[],name:"VaultQueriesDisabled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"contract IERC20",name:"underlyingToken",type:"address"},{indexed:!0,internalType:"contract IERC4626",name:"wrappedToken",type:"address"},{indexed:!1,internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{indexed:!1,internalType:"uint256",name:"mintedShares",type:"uint256"}],name:"Wrap",type:"event"},{stateMutability:"payable",type:"fallback"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{components:[{internalType:"enum SwapKind",name:"kind",type:"uint8"},{internalType:"uint256",name:"amountGivenScaled18",type:"uint256"},{internalType:"uint256[]",name:"balancesScaled18",type:"uint256[]"},{internalType:"uint256",name:"indexIn",type:"uint256"},{internalType:"uint256",name:"indexOut",type:"uint256"},{internalType:"address",name:"router",type:"address"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct PoolSwapParams",name:"swapParams",type:"tuple"}],name:"computeDynamicSwapFeePercentage",outputs:[{internalType:"uint256",name:"dynamicSwapFeePercentage",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"token",type:"address"}],name:"getAggregateSwapFeeAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"contract IERC20",name:"token",type:"address"}],name:"getAggregateYieldFeeAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getBptRate",outputs:[{internalType:"uint256",name:"rate",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getCurrentLiveBalances",outputs:[{internalType:"uint256[]",name:"balancesLiveScaled18",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getHooksConfig",outputs:[{components:[{internalType:"bool",name:"enableHookAdjustedAmounts",type:"bool"},{internalType:"bool",name:"shouldCallBeforeInitialize",type:"bool"},{internalType:"bool",name:"shouldCallAfterInitialize",type:"bool"},{internalType:"bool",name:"shouldCallComputeDynamicSwapFee",type:"bool"},{internalType:"bool",name:"shouldCallBeforeSwap",type:"bool"},{internalType:"bool",name:"shouldCallAfterSwap",type:"bool"},{internalType:"bool",name:"shouldCallBeforeAddLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallAfterAddLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallBeforeRemoveLiquidity",type:"bool"},{internalType:"bool",name:"shouldCallAfterRemoveLiquidity",type:"bool"},{internalType:"address",name:"hooksContract",type:"address"}],internalType:"struct HooksConfig",name:"",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[],name:"getNonzeroDeltaCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getPoolConfig",outputs:[{components:[{components:[{internalType:"bool",name:"disableUnbalancedLiquidity",type:"bool"},{internalType:"bool",name:"enableAddLiquidityCustom",type:"bool"},{internalType:"bool",name:"enableRemoveLiquidityCustom",type:"bool"},{internalType:"bool",name:"enableDonation",type:"bool"}],internalType:"struct LiquidityManagement",name:"liquidityManagement",type:"tuple"},{internalType:"uint256",name:"staticSwapFeePercentage",type:"uint256"},{internalType:"uint256",name:"aggregateSwapFeePercentage",type:"uint256"},{internalType:"uint256",name:"aggregateYieldFeePercentage",type:"uint256"},{internalType:"uint40",name:"tokenDecimalDiffs",type:"uint40"},{internalType:"uint32",name:"pauseWindowEndTime",type:"uint32"},{internalType:"bool",name:"isPoolRegistered",type:"bool"},{internalType:"bool",name:"isPoolInitialized",type:"bool"},{internalType:"bool",name:"isPoolPaused",type:"bool"},{internalType:"bool",name:"isPoolInRecoveryMode",type:"bool"}],internalType:"struct PoolConfig",name:"",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getPoolData",outputs:[{components:[{internalType:"PoolConfigBits",name:"poolConfigBits",type:"bytes32"},{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{components:[{internalType:"enum TokenType",name:"tokenType",type:"uint8"},{internalType:"contract IRateProvider",name:"rateProvider",type:"address"},{internalType:"bool",name:"paysYieldFees",type:"bool"}],internalType:"struct TokenInfo[]",name:"tokenInfo",type:"tuple[]"},{internalType:"uint256[]",name:"balancesRaw",type:"uint256[]"},{internalType:"uint256[]",name:"balancesLiveScaled18",type:"uint256[]"},{internalType:"uint256[]",name:"tokenRates",type:"uint256[]"},{internalType:"uint256[]",name:"decimalScalingFactors",type:"uint256[]"}],internalType:"struct PoolData",name:"",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getPoolPausedState",outputs:[{internalType:"bool",name:"",type:"bool"},{internalType:"uint32",name:"",type:"uint32"},{internalType:"uint32",name:"",type:"uint32"},{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getPoolRoleAccounts",outputs:[{components:[{internalType:"address",name:"pauseManager",type:"address"},{internalType:"address",name:"swapFeeManager",type:"address"},{internalType:"address",name:"poolCreator",type:"address"}],internalType:"struct PoolRoleAccounts",name:"",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getPoolTokenInfo",outputs:[{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{components:[{internalType:"enum TokenType",name:"tokenType",type:"uint8"},{internalType:"contract IRateProvider",name:"rateProvider",type:"address"},{internalType:"bool",name:"paysYieldFees",type:"bool"}],internalType:"struct TokenInfo[]",name:"tokenInfo",type:"tuple[]"},{internalType:"uint256[]",name:"balancesRaw",type:"uint256[]"},{internalType:"uint256[]",name:"lastBalancesLiveScaled18",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getPoolTokenRates",outputs:[{internalType:"uint256[]",name:"decimalScalingFactors",type:"uint256[]"},{internalType:"uint256[]",name:"tokenRates",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getPoolTokens",outputs:[{internalType:"contract IERC20[]",name:"tokens",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getProtocolFeeController",outputs:[{internalType:"contract IProtocolFeeController",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"}],name:"getReservesOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getStaticSwapFeePercentage",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"}],name:"getTokenDelta",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getVaultAdmin",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{internalType:"uint256[]",name:"exactAmountsIn",type:"uint256[]"},{internalType:"uint256",name:"minBptAmountOut",type:"uint256"},{internalType:"bytes",name:"userData",type:"bytes"}],name:"initialize",outputs:[{internalType:"uint256",name:"bptAmountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"isPoolInRecoveryMode",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"isPoolInitialized",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"isPoolPaused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"isPoolRegistered",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"isQueryDisabled",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"isUnlocked",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"data",type:"bytes"}],name:"quote",outputs:[{internalType:"bytes",name:"result",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"data",type:"bytes"}],name:"quoteAndRevert",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"reentrancyGuardEntered",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{components:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"enum TokenType",name:"tokenType",type:"uint8"},{internalType:"contract IRateProvider",name:"rateProvider",type:"address"},{internalType:"bool",name:"paysYieldFees",type:"bool"}],internalType:"struct TokenConfig[]",name:"tokenConfig",type:"tuple[]"},{internalType:"uint256",name:"swapFeePercentage",type:"uint256"},{internalType:"uint32",name:"pauseWindowEndTime",type:"uint32"},{internalType:"bool",name:"protocolFeeExempt",type:"bool"},{components:[{internalType:"address",name:"pauseManager",type:"address"},{internalType:"address",name:"swapFeeManager",type:"address"},{internalType:"address",name:"poolCreator",type:"address"}],internalType:"struct PoolRoleAccounts",name:"roleAccounts",type:"tuple"},{internalType:"address",name:"poolHooksContract",type:"address"},{components:[{internalType:"bool",name:"disableUnbalancedLiquidity",type:"bool"},{internalType:"bool",name:"enableAddLiquidityCustom",type:"bool"},{internalType:"bool",name:"enableRemoveLiquidityCustom",type:"bool"},{internalType:"bool",name:"enableDonation",type:"bool"}],internalType:"struct LiquidityManagement",name:"liquidityManagement",type:"tuple"}],name:"registerPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"pool",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"exactBptAmountIn",type:"uint256"}],name:"removeLiquidityRecovery",outputs:[{internalType:"uint256[]",name:"amountsOutRaw",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"vault",outputs:[{internalType:"contract IVault",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],ey=[{inputs:[{components:[{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"},{internalType:"uint256",name:"numTokens",type:"uint256"},{internalType:"uint256[]",name:"normalizedWeights",type:"uint256[]"},{internalType:"string",name:"version",type:"string"}],internalType:"struct WeightedPool.NewPoolParams",name:"params",type:"tuple"},{internalType:"contract IVault",name:"vault",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"BaseOutOfBounds",type:"error"},{inputs:[],name:"ECDSAInvalidSignature",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"ECDSAInvalidSignatureLength",type:"error"},{inputs:[{internalType:"bytes32",name:"s",type:"bytes32"}],name:"ECDSAInvalidSignatureS",type:"error"},{inputs:[{internalType:"uint256",name:"deadline",type:"uint256"}],name:"ERC2612ExpiredSignature",type:"error"},{inputs:[{internalType:"address",name:"signer",type:"address"},{internalType:"address",name:"owner",type:"address"}],name:"ERC2612InvalidSigner",type:"error"},{inputs:[],name:"ExponentOutOfBounds",type:"error"},{inputs:[],name:"InputLengthMismatch",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"currentNonce",type:"uint256"}],name:"InvalidAccountNonce",type:"error"},{inputs:[],name:"InvalidExponent",type:"error"},{inputs:[],name:"InvalidShortString",type:"error"},{inputs:[],name:"InvalidToken",type:"error"},{inputs:[],name:"MaxInRatio",type:"error"},{inputs:[],name:"MaxOutRatio",type:"error"},{inputs:[],name:"MinWeight",type:"error"},{inputs:[],name:"NormalizedWeightInvariant",type:"error"},{inputs:[],name:"ProductOutOfBounds",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"SenderIsNotVault",type:"error"},{inputs:[{internalType:"string",name:"str",type:"string"}],name:"StringTooLong",type:"error"},{inputs:[],name:"ZeroDivision",type:"error"},{inputs:[],name:"ZeroInvariant",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[],name:"EIP712DomainChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"PERMIT_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"balancesLiveScaled18",type:"uint256[]"},{internalType:"uint256",name:"tokenInIndex",type:"uint256"},{internalType:"uint256",name:"invariantRatio",type:"uint256"}],name:"computeBalance",outputs:[{internalType:"uint256",name:"newBalance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"balancesLiveScaled18",type:"uint256[]"},{internalType:"enum Rounding",name:"rounding",type:"uint8"}],name:"computeInvariant",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},{inputs:[],name:"eip712Domain",outputs:[{internalType:"bytes1",name:"fields",type:"bytes1"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"address",name:"verifyingContract",type:"address"},{internalType:"bytes32",name:"salt",type:"bytes32"},{internalType:"uint256[]",name:"extensions",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"emitApproval",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"emitTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getAggregateFeePercentages",outputs:[{internalType:"uint256",name:"aggregateSwapFeePercentage",type:"uint256"},{internalType:"uint256",name:"aggregateYieldFeePercentage",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentLiveBalances",outputs:[{internalType:"uint256[]",name:"balancesLiveScaled18",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getMaximumInvariantRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[],name:"getMaximumSwapFeePercentage",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[],name:"getMinimumInvariantRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[],name:"getMinimumSwapFeePercentage",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[],name:"getNormalizedWeights",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getStaticSwapFeePercentage",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getTokenInfo",outputs:[{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{components:[{internalType:"enum TokenType",name:"tokenType",type:"uint8"},{internalType:"contract IRateProvider",name:"rateProvider",type:"address"},{internalType:"bool",name:"paysYieldFees",type:"bool"}],internalType:"struct TokenInfo[]",name:"tokenInfo",type:"tuple[]"},{internalType:"uint256[]",name:"balancesRaw",type:"uint256[]"},{internalType:"uint256[]",name:"lastBalancesLiveScaled18",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getTokens",outputs:[{internalType:"contract IERC20[]",name:"tokens",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getVault",outputs:[{internalType:"contract IVault",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getWeightedPoolDynamicData",outputs:[{components:[{internalType:"uint256[]",name:"balancesLiveScaled18",type:"uint256[]"},{internalType:"uint256[]",name:"tokenRates",type:"uint256[]"},{internalType:"uint256",name:"staticSwapFeePercentage",type:"uint256"},{internalType:"uint256",name:"totalSupply",type:"uint256"},{internalType:"uint256",name:"bptRate",type:"uint256"},{internalType:"bool",name:"isPoolInitialized",type:"bool"},{internalType:"bool",name:"isPoolPaused",type:"bool"},{internalType:"bool",name:"isPoolInRecoveryMode",type:"bool"}],internalType:"struct WeightedPoolDynamicData",name:"data",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[],name:"getWeightedPoolImmutableData",outputs:[{components:[{internalType:"contract IERC20[]",name:"tokens",type:"address[]"},{internalType:"uint256[]",name:"decimalScalingFactors",type:"uint256[]"},{internalType:"uint256[]",name:"normalizedWeights",type:"uint256[]"}],internalType:"struct WeightedPoolImmutableData",name:"data",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"enum SwapKind",name:"kind",type:"uint8"},{internalType:"uint256",name:"amountGivenScaled18",type:"uint256"},{internalType:"uint256[]",name:"balancesScaled18",type:"uint256[]"},{internalType:"uint256",name:"indexIn",type:"uint256"},{internalType:"uint256",name:"indexOut",type:"uint256"},{internalType:"address",name:"router",type:"address"},{internalType:"bytes",name:"userData",type:"bytes"}],internalType:"struct PoolSwapParams",name:"request",type:"tuple"}],name:"onSwap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"version",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],ed=((a=ed||{}).AaveLinear="AaveLinear",a.ComposableStable="ComposableStable",a.CowAmm="CowAmm",a.Fx="FX",a.Gyro2="Gyro2",a.Gyro3="Gyro3",a.GyroE="GyroE",a.MetaStable="MetaStable",a.Stable="Stable",a.Weighted="Weighted",a),el=((i=el||{})[i.GivenIn=0]="GivenIn",i[i.GivenOut=1]="GivenOut",i),em=((r=em||{})[r.STANDARD=0]="STANDARD",r[r.TOKEN_WITH_RATE=1]="TOKEN_WITH_RATE",r[r.ERC4626_TOKEN=2]="ERC4626_TOKEN",r),ec={COMPOSABLE_STABLE:"ComposableStable",GYRO:"Gyro2",GYRO3:"Gyro3",GYROE:"GyroE",META_STABLE:"MetaStable",STABLE:"Stable",WEIGHTED:"Weighted",COW_AMM:"CowAmm"},eT=e=>{let t=Object.keys(ec);if(!t.includes(e))throw Error(`Unsupported pool type ${e} - supported types are ${t.join(", ")}`);return ec[e]},eb=class{constructor(e,t,n,a,i,r){ee(this,"chainId"),ee(this,"address"),ee(this,"decimals"),ee(this,"symbol"),ee(this,"name"),ee(this,"wrapped"),this.chainId=e,this.address=t.toLowerCase(),this.decimals=n,this.symbol=a,this.name=i,this.wrapped=r?r.toLowerCase():t.toLowerCase()}isEqual(e){return this.chainId===e.chainId&&this.address===e.address}isUnderlyingEqual(e){return this.chainId===e.chainId&&this.wrapped===e.wrapped}isSameAddress(e){return this.address===e.toLowerCase()}toInputToken(){return{address:this.address,decimals:this.decimals}}},ef="0x0000000000000000000000000000000000000000",eI={account:ef},eh="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",ew=0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn,eA={0:1n,1:10n,2:100n,3:1000n,4:10000n,5:100000n,6:1000000n,7:10000000n,8:100000000n,9:1000000000n,10:10000000000n,11:100000000000n,12:1000000000000n,13:10000000000000n,14:100000000000000n,15:1000000000000000n,16:0x2386f26fc10000n,17:0x16345785d8a0000n,18:0xde0b6b3a7640000n},ex=((p=ex||{})[p.MAINNET=1]="MAINNET",p[p.GOERLI=5]="GOERLI",p[p.OPTIMISM=10]="OPTIMISM",p[p.BSC=56]="BSC",p[p.GNOSIS_CHAIN=100]="GNOSIS_CHAIN",p[p.POLYGON=137]="POLYGON",p[p.ZKSYNC_TESTNET=280]="ZKSYNC_TESTNET",p[p.FANTOM=250]="FANTOM",p[p.FRAXTAL=252]="FRAXTAL",p[p.ZKSYNC=324]="ZKSYNC",p[p.ZKEVM=1101]="ZKEVM",p[p.BASE=8453]="BASE",p[p.MODE=34443]="MODE",p[p.ARBITRUM_ONE=42161]="ARBITRUM_ONE",p[p.AVALANCHE=43114]="AVALANCHE",p[p.BASE_GOERLI=84531]="BASE_GOERLI",p[p.SEPOLIA=11155111]="SEPOLIA",p),ek={1:T.R,5:b.w,10:f.v,56:I.e,100:h.K,137:w.y,250:A.Q,252:x.q,324:k.l,1101:v.m,8453:g.u,34443:E.x,42161:R.y,43114:O.p,84531:C.J,11155111:S.F},ev={42161:"0x9B892E515D2Ab8869F17488d64B3b918731cc70d",43114:"0xA084c11cb55e67C9becf9607f1DBB20ec4D5E7b2",8453:"0x76f7204b62f554b79d444588edac9dfa7032c71a",56:"0xf41D6De4bbE9919d87BC1E5cc3335549e2A1A6c0",252:"0xb541765F540447646A9545E0A4800A0Bacf9E13D",100:"0x2163c2FcD0940e84B8a68991bF926eDfB0Cd926C",5:"0x7f36A11750F225De646b0de7b26BC74e797c310B",1:"0x35Cea9e57A393ac66Aaa7E25C391D52C74B5648f",34443:"0xb541765f540447646a9545e0a4800a0bacf9e13d",10:"0x015ACA20a1422F3c729086c17f15F10e0CfbC75A",137:"0xB1ED8d3b5059b3281D43306cC9D043cE8B22599b",11155111:"0x7852fB9d0895e6e8b3EedA553c03F6e2F9124dF9",1101:"0x8e620FfCa2580ed87241D7e10F85EE75d0a906F5"},eg={42161:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",43114:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",8453:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",250:"0x20dd72Ed959b6147912C2e529F0a0C651c33c9ce",252:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",100:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",1:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",34443:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",10:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",137:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",1101:"0xBA12222222228d8Ba445958a75a0704d566BF2C8",11155111:"0xBA12222222228d8Ba445958a75a0704d566BF2C8"},eE={11155111:"0x0EF1c156a7986F394d90eD1bEeA6483Cc435F542"},eR={42161:"0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5",43114:"0xC128468b7Ce63eA702C1f104D55A2566b13D3ABD",8453:"0x300ab2038eac391f26d9f895dc61f8f66a548833",250:"0x1B0A42663DF1edeA171cD8732d288a81EFfF6d23",252:"0x4132f7AcC9dB7A6cF7BE2Dd3A9DC8b30C7E6E6c8",100:"0x0f3e0c4218b7b0108a3643cfe9d3ec0d4f57c54e",1:"0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5",34443:"0x36caC20dd805d128c1a6Dd16eeA845C574b5A17C",10:"0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5",137:"0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5",1101:"0x809b79b53f18e9bc08a961ed4678b901ac93213a",11155111:"0x1802953277FD955f9a254B80Aa0582f193cF1d77"},eO={11155111:"0xB12FcB422aAe6720f882E22C340964a7723f2387"},eC={11155111:"0x0418001D0d68C71d0E391fE46dC7aFCe045f34A0"},eS={11155111:"0x000000000022D473030F116dDEE9F6B43aC78BA3"},eB={42161:new eb(42161,eh,18,"ETH","Ether","0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"),8453:new eb(8453,eh,18,"ETH","Ether","0x4200000000000000000000000000000000000006"),250:new eb(250,eh,18,"FANTOM","Fantom","0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83"),252:new eb(252,eh,18,"FRAXTAL","Fraxtal","0xfc00000000000000000000000000000000000006"),100:new eb(100,eh,18,"xDAI","xDAI","0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d"),5:new eb(5,eh,18,"ETH","Ether","0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6"),1:new eb(1,eh,18,"ETH","Ether","0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"),34443:new eb(34443,eh,18,"ETH","Ether","0x4200000000000000000000000000000000000006"),10:new eb(10,eh,18,"ETH","Ether","0x4200000000000000000000000000000000000006"),137:new eb(137,eh,18,"MATIC","Matic","0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270"),11155111:new eb(11155111,eh,18,"ETH","Ether","0x7b79995e5f793a07bc00c21412e50ecae098e7f9"),43114:new eb(43114,eh,18,"AVAX","Avax","0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7"),1101:new eb(1101,eh,18,"MATIC","Matic","0xa2036f0538221a77a3937f1379699f44945018d0")};eB[1];var eP={sender:ef,recipient:ef,fromInternalBalance:!1,toInternalBalance:!1},eM=Error("AddLiquidityKind.SingleToken should have tokenInIndex");Error("AddLiquidityKind.Proportional is not available for V3. Please use ProportionalAmountsHelper to calculate proportional amountsIn and use AddLiquidityKind.Unbalanced instead.");var eq=Error("RemoveLiquidityKind.SingleTokenExactIn should have tokenOutIndex"),eL=Error("Unbalanced remove liquidity not supported on V3"),eD=e=>Error(`Add Liquidity Proportional not supported on pool type: ${e}`),eN=(e,t)=>Error(`Add Liquidity ${e} not supported for pool ${t}. Use Add Liquidity Proportional`),e_=(e,t)=>Error(`Remove Liquidity ${e} not supported for pool ${t}. Use Remove Liquidity Proportional`),eF=Error("buildCall with Permit2 signatures is only available for v3"),eU=e=>e<0n?-e:e,eV=e=>e.reduce((e,t)=>e<t?e:t),eW=e=>e.reduce((e,t)=>e>t?e:t),eK=(e,t)=>{if(!e)throw Error(t)},eH=class e{static max(e,t){return e>=t?e:t}static min(e,t){return e<t?e:t}static mulDownFixed(e,t){return e*t/0xde0b6b3a7640000n}static mulUpFixed(e,t){let n=e*t;return 0n===n?0n:(n-1n)/0xde0b6b3a7640000n+1n}static divDownFixed(e,t){return 0n===e?0n:0xde0b6b3a7640000n*e/t}static divUpFixed(e,t){return 0n===e?0n:(0xde0b6b3a7640000n*e-1n)/t+1n}static divUp(e,t){return 0n===e?0n:1n+(e-1n)/t}static powUpFixed(t,n,a){if(0xde0b6b3a7640000n===n&&1!==a)return t;if(0x1bc16d674ec80000n===n&&1!==a)return e.mulUpFixed(t,t);if(0x3782dace9d900000n===n&&1!==a){let n=e.mulUpFixed(t,t);return e.mulUpFixed(n,n)}let i=eG.pow(t,n),r=e.mulUpFixed(i,e.MAX_POW_RELATIVE_ERROR)+1n;return i+r}static powDownFixed(t,n,a){if(0xde0b6b3a7640000n===n&&1!==a)return t;if(0x1bc16d674ec80000n===n&&1!==a)return e.mulUpFixed(t,t);if(0x3782dace9d900000n===n&&1!==a){let n=e.mulUpFixed(t,t);return e.mulUpFixed(n,n)}let i=eG.pow(t,n),r=e.mulUpFixed(i,e.MAX_POW_RELATIVE_ERROR)+1n;return i<r?0n:i-r}static complementFixed(e){return e<0xde0b6b3a7640000n?0xde0b6b3a7640000n-e:0n}};ee(eH,"MAX_POW_RELATIVE_ERROR",10000n);var ez=class e{static pow(t,n){let a;if(0n===n)return 0xde0b6b3a7640000n;if(0n===t)return 0n;if(eK(t<0x8000000000000000000000000000000000000000000000000000000000000000n,"Errors.X_OUT_OF_BOUNDS"),eK(n<e.MILD_EXPONENT_BOUND,"Errors.Y_OUT_OF_BOUNDS"),e.LN_36_LOWER_BOUND<t&&t<e.LN_36_UPPER_BOUND){let i=e._ln_36(t);a=i/0xde0b6b3a7640000n*n+i%0xde0b6b3a7640000n*n/0xde0b6b3a7640000n}else a=e._ln(t)*n;return a/=0xde0b6b3a7640000n,eK(e.MIN_NATURAL_EXPONENT<=a&&a<=e.MAX_NATURAL_EXPONENT,"Errors.PRODUCT_OUT_OF_BOUNDS"),e.exp(a)}static exp(t){let n,a,i=t;if(eK(i>=e.MIN_NATURAL_EXPONENT&&i<=e.MAX_NATURAL_EXPONENT,"Errors.INVALID_EXPONENT"),i<0)return 0xde0b6b3a7640000n*0xde0b6b3a7640000n/e.exp(-1n*i);i>=e.x0?(i-=e.x0,n=e.a0):i>=e.x1?(i-=e.x1,n=e.a1):n=1n;let r=0x56bc75e2d63100000n;(i*=100n)>=e.x2&&(i-=e.x2,r=r*e.a2/0x56bc75e2d63100000n),i>=e.x3&&(i-=e.x3,r=r*e.a3/0x56bc75e2d63100000n),i>=e.x4&&(i-=e.x4,r=r*e.a4/0x56bc75e2d63100000n),i>=e.x5&&(i-=e.x5,r=r*e.a5/0x56bc75e2d63100000n),i>=e.x6&&(i-=e.x6,r=r*e.a6/0x56bc75e2d63100000n),i>=e.x7&&(i-=e.x7,r=r*e.a7/0x56bc75e2d63100000n),i>=e.x8&&(i-=e.x8,r=r*e.a8/0x56bc75e2d63100000n),i>=e.x9&&(i-=e.x9,r=r*e.a9/0x56bc75e2d63100000n);let p=0x56bc75e2d63100000n;return r*(p+=(a=i)+(a=a*i/0x56bc75e2d63100000n/2n)+(a=a*i/0x56bc75e2d63100000n/3n)+(a=a*i/0x56bc75e2d63100000n/4n)+(a=a*i/0x56bc75e2d63100000n/5n)+(a=a*i/0x56bc75e2d63100000n/6n)+(a=a*i/0x56bc75e2d63100000n/7n)+(a=a*i/0x56bc75e2d63100000n/8n)+(a=a*i/0x56bc75e2d63100000n/9n)+(a=a*i/0x56bc75e2d63100000n/10n)+(a=a*i/0x56bc75e2d63100000n/11n)+(a=a*i/0x56bc75e2d63100000n/12n))/0x56bc75e2d63100000n*n/100n}static _ln_36(e){let t=e,n=((t*=0xde0b6b3a7640000n)-0xc097ce7bc90715b34b9f1000000000n)*0xc097ce7bc90715b34b9f1000000000n/(t+0xc097ce7bc90715b34b9f1000000000n),a=n*n/0xc097ce7bc90715b34b9f1000000000n,i=n,r=i;return 2n*(r+=(i=i*a/0xc097ce7bc90715b34b9f1000000000n)/3n+(i=i*a/0xc097ce7bc90715b34b9f1000000000n)/5n+(i=i*a/0xc097ce7bc90715b34b9f1000000000n)/7n+(i=i*a/0xc097ce7bc90715b34b9f1000000000n)/9n+(i=i*a/0xc097ce7bc90715b34b9f1000000000n)/11n+(i=i*a/0xc097ce7bc90715b34b9f1000000000n)/13n+(i=i*a/0xc097ce7bc90715b34b9f1000000000n)/15n)}static _ln(t){let n=t;if(n<0xde0b6b3a7640000n)return-1n*e._ln(0xde0b6b3a7640000n*0xde0b6b3a7640000n/n);let a=0n;n>=0xde0b6b3a7640000n*e.a0&&(n/=e.a0,a+=e.x0),n>=0xde0b6b3a7640000n*e.a1&&(n/=e.a1,a+=e.x1),a*=100n,(n*=100n)>=e.a2&&(n=0x56bc75e2d63100000n*n/e.a2,a+=e.x2),n>=e.a3&&(n=0x56bc75e2d63100000n*n/e.a3,a+=e.x3),n>=e.a4&&(n=0x56bc75e2d63100000n*n/e.a4,a+=e.x4),n>=e.a5&&(n=0x56bc75e2d63100000n*n/e.a5,a+=e.x5),n>=e.a6&&(n=0x56bc75e2d63100000n*n/e.a6,a+=e.x6),n>=e.a7&&(n=0x56bc75e2d63100000n*n/e.a7,a+=e.x7),n>=e.a8&&(n=0x56bc75e2d63100000n*n/e.a8,a+=e.x8),n>=e.a9&&(n=0x56bc75e2d63100000n*n/e.a9,a+=e.x9),n>=e.a10&&(n=0x56bc75e2d63100000n*n/e.a10,a+=e.x10),n>=e.a11&&(n=0x56bc75e2d63100000n*n/e.a11,a+=e.x11);let i=(n-0x56bc75e2d63100000n)*0x56bc75e2d63100000n/(n+0x56bc75e2d63100000n),r=i*i/0x56bc75e2d63100000n,p=i,s=p;return s+=(p=p*r/0x56bc75e2d63100000n)/3n+(p=p*r/0x56bc75e2d63100000n)/5n+(p=p*r/0x56bc75e2d63100000n)/7n+(p=p*r/0x56bc75e2d63100000n)/9n+(p=p*r/0x56bc75e2d63100000n)/11n,(a+(s*=2n))/100n}};ee(ez,"MAX_NATURAL_EXPONENT",0x70c1cc73b00c80000n),ee(ez,"MIN_NATURAL_EXPONENT",-0x238fd42c5cf040000n),ee(ez,"LN_36_LOWER_BOUND",0xde0b6b3a7640000n-0x16345785d8a0000n),ee(ez,"LN_36_UPPER_BOUND",0xde0b6b3a7640000n+0x16345785d8a0000n),ee(ez,"MILD_EXPONENT_BOUND",0xbce5086492111aea88f4bb1ca6bcf584181ea8059f76532n),ee(ez,"x0",0x6f05b59d3b2000000n),ee(ez,"a0",0x195e54c5dd42177f53a27172fa9ec630262827000000000n),ee(ez,"x1",0x3782dace9d9000000n),ee(ez,"a1",0x1425982cf597cd205cef7380n),ee(ez,"x2",0xad78ebc5ac62000000n),ee(ez,"a2",0x1855144814a7ff805980ff0084000n),ee(ez,"x3",0x56bc75e2d631000000n),ee(ez,"a3",0x2df0ab5a80a22c61ab5a700n),ee(ez,"x4",0x2b5e3af16b18800000n),ee(ez,"a4",0x3f1fce3da636ea5cf850n),ee(ez,"x5",0x15af1d78b58c400000n),ee(ez,"a5",0x127fa27722cc06cc5e2n),ee(ez,"x6",0xad78ebc5ac6200000n),ee(ez,"a6",0x280e60114edb805d03n),ee(ez,"x7",0x56bc75e2d63100000n),ee(ez,"a7",0xebc5fb41746121110n),ee(ez,"x8",0x2b5e3af16b1880000n),ee(ez,"a8",0x8f00f760a4b2db55dn),ee(ez,"x9",0x15af1d78b58c40000n),ee(ez,"a9",0x6f5f1775788937937n),ee(ez,"x10",0xad78ebc5ac620000n),ee(ez,"a10",0x6248f33704b286603n),ee(ez,"x11",0x56bc75e2d6310000n),ee(ez,"a11",0x5c548670b9510e7acn);var eG=ez,eX=class e{constructor(e,t){ee(this,"token"),ee(this,"scalar"),ee(this,"decimalScale"),ee(this,"amount"),ee(this,"scale18"),this.decimalScale=eA[e.decimals],this.token=e,this.amount=BigInt(t),this.scalar=eA[18-e.decimals],this.scale18=this.amount*this.scalar}static fromRawAmount(t,n){return new e(t,n)}static fromHumanAmount(t,n){let a=(0,P.v)(n,t.decimals);return new e(t,a)}static fromScale18Amount(t,n,a){let i=eA[18-t.decimals];return new e(t,a?1n+(BigInt(n)-1n)/i:BigInt(n)/i)}add(t){return new e(this.token,this.amount+t.amount)}sub(t){return new e(this.token,this.amount-t.amount)}mulUpFixed(t){let n=this.amount*t;return new e(this.token,(n-1n)/0xde0b6b3a7640000n+1n)}mulDownFixed(t){let n=this.amount*t/0xde0b6b3a7640000n;return new e(this.token,n)}divUpFixed(t){let n=(0xde0b6b3a7640000n*this.amount+t-1n)/t;return new e(this.token,n)}divDownFixed(t){let n=0xde0b6b3a7640000n*this.amount/t;return new e(this.token,n)}toSignificant(e=6){return new B(this.amount.toString()).div(new B(this.decimalScale.toString())).toDecimalPlaces(e).toString()}toInputAmount(){return{address:this.token.address,decimals:this.token.decimals,rawAmount:this.amount}}};function e$(e,t){return e.toLowerCase()===t.toLowerCase()}function eY(e,t){return -1===t?e:[...e.slice(0,t),...e.slice(t+1)]}var ej=e=>{if(66!==e.length)throw Error("Invalid poolId length");return e.slice(0,42).toLowerCase()};function eQ(e){let t=[{id:e.id,address:e.address,type:eT(e.type),level:1,tokens:e.poolTokens.map(e=>({address:e.address,decimals:e.decimals,index:e.index}))}];return e.poolTokens.forEach(n=>{!n.nestedPool||e$(e.address,n.nestedPool.address)||t.push({id:n.nestedPool.id,address:n.nestedPool.address,level:0,type:eT(n.nestedPool.type),tokens:n.nestedPool.tokens.map(e=>({address:e.address,decimals:e.decimals,index:e.index}))})}),{pools:t,mainTokens:e.allTokens.filter(e=>e.isMainToken).map(e=>({address:e.address,decimals:e.decimals}))}}var eZ=[{type:"constructor",inputs:[],stateMutability:"nonpayable"},{type:"function",name:"BONE",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"BPOW_PRECISION",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"EXIT_FEE",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"INIT_POOL_SUPPLY",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MAX_BOUND_TOKENS",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MAX_BPOW_BASE",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MAX_FEE",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MAX_IN_RATIO",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MAX_OUT_RATIO",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MAX_TOTAL_WEIGHT",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MAX_WEIGHT",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MIN_BALANCE",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MIN_BOUND_TOKENS",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MIN_BPOW_BASE",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MIN_FEE",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"MIN_WEIGHT",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"allowance",inputs:[{name:"src",type:"address",internalType:"address"},{name:"dst",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"approve",inputs:[{name:"dst",type:"address",internalType:"address"},{name:"amt",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"balanceOf",inputs:[{name:"whom",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"bind",inputs:[{name:"token",type:"address",internalType:"address"},{name:"balance",type:"uint256",internalType:"uint256"},{name:"denorm",type:"uint256",internalType:"uint256"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"calcInGivenOut",inputs:[{name:"tokenBalanceIn",type:"uint256",internalType:"uint256"},{name:"tokenWeightIn",type:"uint256",internalType:"uint256"},{name:"tokenBalanceOut",type:"uint256",internalType:"uint256"},{name:"tokenWeightOut",type:"uint256",internalType:"uint256"},{name:"tokenAmountOut",type:"uint256",internalType:"uint256"},{name:"swapFee",type:"uint256",internalType:"uint256"}],outputs:[{name:"tokenAmountIn",type:"uint256",internalType:"uint256"}],stateMutability:"pure"},{type:"function",name:"calcOutGivenIn",inputs:[{name:"tokenBalanceIn",type:"uint256",internalType:"uint256"},{name:"tokenWeightIn",type:"uint256",internalType:"uint256"},{name:"tokenBalanceOut",type:"uint256",internalType:"uint256"},{name:"tokenWeightOut",type:"uint256",internalType:"uint256"},{name:"tokenAmountIn",type:"uint256",internalType:"uint256"},{name:"swapFee",type:"uint256",internalType:"uint256"}],outputs:[{name:"tokenAmountOut",type:"uint256",internalType:"uint256"}],stateMutability:"pure"},{type:"function",name:"calcPoolInGivenSingleOut",inputs:[{name:"tokenBalanceOut",type:"uint256",internalType:"uint256"},{name:"tokenWeightOut",type:"uint256",internalType:"uint256"},{name:"poolSupply",type:"uint256",internalType:"uint256"},{name:"totalWeight",type:"uint256",internalType:"uint256"},{name:"tokenAmountOut",type:"uint256",internalType:"uint256"},{name:"swapFee",type:"uint256",internalType:"uint256"}],outputs:[{name:"poolAmountIn",type:"uint256",internalType:"uint256"}],stateMutability:"pure"},{type:"function",name:"calcPoolOutGivenSingleIn",inputs:[{name:"tokenBalanceIn",type:"uint256",internalType:"uint256"},{name:"tokenWeightIn",type:"uint256",internalType:"uint256"},{name:"poolSupply",type:"uint256",internalType:"uint256"},{name:"totalWeight",type:"uint256",internalType:"uint256"},{name:"tokenAmountIn",type:"uint256",internalType:"uint256"},{name:"swapFee",type:"uint256",internalType:"uint256"}],outputs:[{name:"poolAmountOut",type:"uint256",internalType:"uint256"}],stateMutability:"pure"},{type:"function",name:"calcSingleInGivenPoolOut",inputs:[{name:"tokenBalanceIn",type:"uint256",internalType:"uint256"},{name:"tokenWeightIn",type:"uint256",internalType:"uint256"},{name:"poolSupply",type:"uint256",internalType:"uint256"},{name:"totalWeight",type:"uint256",internalType:"uint256"},{name:"poolAmountOut",type:"uint256",internalType:"uint256"},{name:"swapFee",type:"uint256",internalType:"uint256"}],outputs:[{name:"tokenAmountIn",type:"uint256",internalType:"uint256"}],stateMutability:"pure"},{type:"function",name:"calcSingleOutGivenPoolIn",inputs:[{name:"tokenBalanceOut",type:"uint256",internalType:"uint256"},{name:"tokenWeightOut",type:"uint256",internalType:"uint256"},{name:"poolSupply",type:"uint256",internalType:"uint256"},{name:"totalWeight",type:"uint256",internalType:"uint256"},{name:"poolAmountIn",type:"uint256",internalType:"uint256"},{name:"swapFee",type:"uint256",internalType:"uint256"}],outputs:[{name:"tokenAmountOut",type:"uint256",internalType:"uint256"}],stateMutability:"pure"},{type:"function",name:"calcSpotPrice",inputs:[{name:"tokenBalanceIn",type:"uint256",internalType:"uint256"},{name:"tokenWeightIn",type:"uint256",internalType:"uint256"},{name:"tokenBalanceOut",type:"uint256",internalType:"uint256"},{name:"tokenWeightOut",type:"uint256",internalType:"uint256"},{name:"swapFee",type:"uint256",internalType:"uint256"}],outputs:[{name:"spotPrice",type:"uint256",internalType:"uint256"}],stateMutability:"pure"},{type:"function",name:"decimals",inputs:[],outputs:[{name:"",type:"uint8",internalType:"uint8"}],stateMutability:"view"},{type:"function",name:"decreaseApproval",inputs:[{name:"dst",type:"address",internalType:"address"},{name:"amt",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"exitPool",inputs:[{name:"poolAmountIn",type:"uint256",internalType:"uint256"},{name:"minAmountsOut",type:"uint256[]",internalType:"uint256[]"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"exitswapExternAmountOut",inputs:[{name:"tokenOut",type:"address",internalType:"address"},{name:"tokenAmountOut",type:"uint256",internalType:"uint256"},{name:"maxPoolAmountIn",type:"uint256",internalType:"uint256"}],outputs:[{name:"poolAmountIn",type:"uint256",internalType:"uint256"}],stateMutability:"nonpayable"},{type:"function",name:"exitswapPoolAmountIn",inputs:[{name:"tokenOut",type:"address",internalType:"address"},{name:"poolAmountIn",type:"uint256",internalType:"uint256"},{name:"minAmountOut",type:"uint256",internalType:"uint256"}],outputs:[{name:"tokenAmountOut",type:"uint256",internalType:"uint256"}],stateMutability:"nonpayable"},{type:"function",name:"finalize",inputs:[],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"getBalance",inputs:[{name:"token",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"getColor",inputs:[],outputs:[{name:"",type:"bytes32",internalType:"bytes32"}],stateMutability:"pure"},{type:"function",name:"getController",inputs:[],outputs:[{name:"",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"getCurrentTokens",inputs:[],outputs:[{name:"tokens",type:"address[]",internalType:"address[]"}],stateMutability:"view"},{type:"function",name:"getDenormalizedWeight",inputs:[{name:"token",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"getFinalTokens",inputs:[],outputs:[{name:"tokens",type:"address[]",internalType:"address[]"}],stateMutability:"view"},{type:"function",name:"getNormalizedWeight",inputs:[{name:"token",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"getNumTokens",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"getSpotPrice",inputs:[{name:"tokenIn",type:"address",internalType:"address"},{name:"tokenOut",type:"address",internalType:"address"}],outputs:[{name:"spotPrice",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"getSpotPriceSansFee",inputs:[{name:"tokenIn",type:"address",internalType:"address"},{name:"tokenOut",type:"address",internalType:"address"}],outputs:[{name:"spotPrice",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"getSwapFee",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"getTotalDenormalizedWeight",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"increaseApproval",inputs:[{name:"dst",type:"address",internalType:"address"},{name:"amt",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"isBound",inputs:[{name:"t",type:"address",internalType:"address"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"isFinalized",inputs:[],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"joinPool",inputs:[{name:"poolAmountOut",type:"uint256",internalType:"uint256"},{name:"maxAmountsIn",type:"uint256[]",internalType:"uint256[]"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"joinswapExternAmountIn",inputs:[{name:"tokenIn",type:"address",internalType:"address"},{name:"tokenAmountIn",type:"uint256",internalType:"uint256"},{name:"minPoolAmountOut",type:"uint256",internalType:"uint256"}],outputs:[{name:"poolAmountOut",type:"uint256",internalType:"uint256"}],stateMutability:"nonpayable"},{type:"function",name:"joinswapPoolAmountOut",inputs:[{name:"tokenIn",type:"address",internalType:"address"},{name:"poolAmountOut",type:"uint256",internalType:"uint256"},{name:"maxAmountIn",type:"uint256",internalType:"uint256"}],outputs:[{name:"tokenAmountIn",type:"uint256",internalType:"uint256"}],stateMutability:"nonpayable"},{type:"function",name:"name",inputs:[],outputs:[{name:"",type:"string",internalType:"string"}],stateMutability:"view"},{type:"function",name:"setController",inputs:[{name:"manager",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"setSwapFee",inputs:[{name:"swapFee",type:"uint256",internalType:"uint256"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"swapExactAmountIn",inputs:[{name:"tokenIn",type:"address",internalType:"address"},{name:"tokenAmountIn",type:"uint256",internalType:"uint256"},{name:"tokenOut",type:"address",internalType:"address"},{name:"minAmountOut",type:"uint256",internalType:"uint256"},{name:"maxPrice",type:"uint256",internalType:"uint256"}],outputs:[{name:"tokenAmountOut",type:"uint256",internalType:"uint256"},{name:"spotPriceAfter",type:"uint256",internalType:"uint256"}],stateMutability:"nonpayable"},{type:"function",name:"swapExactAmountOut",inputs:[{name:"tokenIn",type:"address",internalType:"address"},{name:"maxAmountIn",type:"uint256",internalType:"uint256"},{name:"tokenOut",type:"address",internalType:"address"},{name:"tokenAmountOut",type:"uint256",internalType:"uint256"},{name:"maxPrice",type:"uint256",internalType:"uint256"}],outputs:[{name:"tokenAmountIn",type:"uint256",internalType:"uint256"},{name:"spotPriceAfter",type:"uint256",internalType:"uint256"}],stateMutability:"nonpayable"},{type:"function",name:"symbol",inputs:[],outputs:[{name:"",type:"string",internalType:"string"}],stateMutability:"view"},{type:"function",name:"totalSupply",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"transfer",inputs:[{name:"dst",type:"address",internalType:"address"},{name:"amt",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"transferFrom",inputs:[{name:"src",type:"address",internalType:"address"},{name:"dst",type:"address",internalType:"address"},{name:"amt",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"unbind",inputs:[{name:"token",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"event",name:"Approval",inputs:[{name:"owner",type:"address",indexed:!0,internalType:"address"},{name:"spender",type:"address",indexed:!0,internalType:"address"},{name:"value",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"event",name:"LOG_CALL",inputs:[{name:"sig",type:"bytes4",indexed:!0,internalType:"bytes4"},{name:"caller",type:"address",indexed:!0,internalType:"address"},{name:"data",type:"bytes",indexed:!1,internalType:"bytes"}],anonymous:!0},{type:"event",name:"LOG_EXIT",inputs:[{name:"caller",type:"address",indexed:!0,internalType:"address"},{name:"tokenOut",type:"address",indexed:!0,internalType:"address"},{name:"tokenAmountOut",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"event",name:"LOG_JOIN",inputs:[{name:"caller",type:"address",indexed:!0,internalType:"address"},{name:"tokenIn",type:"address",indexed:!0,internalType:"address"},{name:"tokenAmountIn",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"event",name:"LOG_SWAP",inputs:[{name:"caller",type:"address",indexed:!0,internalType:"address"},{name:"tokenIn",type:"address",indexed:!0,internalType:"address"},{name:"tokenOut",type:"address",indexed:!0,internalType:"address"},{name:"tokenAmountIn",type:"uint256",indexed:!1,internalType:"uint256"},{name:"tokenAmountOut",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"event",name:"Transfer",inputs:[{name:"from",type:"address",indexed:!0,internalType:"address"},{name:"to",type:"address",indexed:!0,internalType:"address"},{name:"value",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1}];function eJ(e,t){return e.sort((e,t)=>e.index-t.index).map(e=>new eb(t,e.address,e.decimals))}var e0=async(e,t,n)=>{let a={address:e.address,abi:eZ,functionName:"totalSupply"},i=eJ(e.tokens,t),r=i.map(t=>({address:e.address,abi:eZ,functionName:"getBalance",args:[t.address]})),p=(0,q.v)({transport:(0,L.d)(n),chain:ek[t]}),s=await p.multicall({contracts:[a,...r]});if(s.some(e=>"failure"===e.status))throw Error("Error: Unable to get pool state with balances for CowAmm pool.");let o=s[0].result,u=s.slice(1).map(e=>e.result);return{...e,tokens:i.map((e,t)=>({address:e.address,decimals:e.decimals,index:t,balance:(0,D.b)(u[t],e.decimals)})),totalShares:(0,N.d)(o)}};function e2(e,t){let n,a;let i=[...e.tokens,{address:e.address,balance:e.totalShares,decimals:18}],r=i.length-1,p=i.findIndex(e=>e.address.toLowerCase()===t.address.toLowerCase());if(-1===p)throw Error("Reference amount must be relative to a token in the pool or its BPT");let s=i.map(e=>(0,P.v)(e.balance,e.decimals)),o=s[p];p===r?(n=function(e,t){if(0n===t)throw Error("BNum_DivZero");let n=0xde0b6b3a7640000n*e;if(0n!==e&&n/e!==0xde0b6b3a7640000n)throw Error("BNum_DivInternal");let a=n+(t>>1n);if(a<n)throw Error("BNum_DivInternal");return a/t}(t.rawAmount,o),a=s.map(e=>(function(e,t){let n=e*t;if(e!==BigInt(0)&&n/e!==t)throw Error("BNum_MulOverflow");let a=n+(0xde0b6b3a7640000n>>1n);if(a<n)throw Error("BNum_MulOverflow");return a/0xde0b6b3a7640000n})(e,n))):(n=function(e,t){if(0n===t)throw Error("BNum_DivZero");return(0xde0b6b3a7640000n*e-(0xde0b6b3a7640000n>>1n))/t}(t.rawAmount,o),a=s.map(e=>{var t;return(e*(t=n)-(t>>1n))/0xde0b6b3a7640000n}));let u=i.map(({address:e,decimals:t},n)=>({address:e,decimals:t,rawAmount:a[n]})),y=u.pop();return{tokenAmounts:u,bptAmount:y}}async function e6(e,t,n){let a=(0,q.v)({transport:(0,L.d)(e),chain:ek[t]}),{result:[i,r]}=await a.simulateContract({address:eR[t],abi:en,functionName:"queryJoin",args:n});return{bptOut:i,amountsIn:r}}function e5(e,t,n=0n){return e.map(e=>t.find(t=>e.isSameAddress(t.address))?.rawAmount??n)}var e1=async(e,t,n)=>{let a=e3(e),i={address:eg[t],abi:es,functionName:"getPoolTokens",args:[e.id]},r=(0,q.v)({transport:(0,L.d)(n),chain:ek[t]}),p=await r.multicall({contracts:[a,i]});if(p.some(e=>"failure"===e.status))throw Error("Error: Unable to get pool state with balances for v2 pool.");let s=p[0].result,[o,u]=p[1].result,y=eJ(e.tokens,t);return{...e,tokens:y.map((e,t)=>({address:e.address,decimals:e.decimals,index:t,balance:(0,D.b)(u[t],e.decimals)})),totalShares:(0,N.d)(s)}},e3=e=>"ComposableStable"===e.type?{address:e.address,abi:[{inputs:[],name:"getActualSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],functionName:"getActualSupply"}:{address:e.address,abi:[{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],functionName:"totalSupply"},e4=async(e,t,n)=>{let a={address:eE[t],abi:eu,functionName:"totalSupply",args:[e.address]},i={address:eE[t],abi:eu,functionName:"getCurrentLiveBalances",args:[e.address]},r=(0,q.v)({transport:(0,L.d)(n),chain:ek[t]}),p=await r.multicall({contracts:[a,i]});if(p.some(e=>"failure"===e.status))throw Error("Error: Unable to get pool state with balances for v3 pool.");let s=p[0].result,o=p[1].result,u=eJ(e.tokens,t);return{...e,tokens:u.map((e,t)=>({address:e.address,decimals:e.decimals,index:t,balance:(0,D.b)(o[t],e.decimals)})),totalShares:(0,N.d)(s)}},e8=(e,t)=>{let n=0n;return t&&(n=e.find(e=>e.token.isUnderlyingEqual(eB[e.token.chainId]))?.amount??0n),n};function e7(e,t){return e.map(e=>e.isUnderlyingEqual(eB[t])?new eb(t,ef,18):e)}function e9({wethIsEth:e,chainId:t,sortedTokens:n,poolId:a,sender:i,recipient:r,maxAmountsIn:p,userData:s,fromInternalBalance:o}){let u=t&&e?e7([...n],t):[...n];return{args:[a,i,r,{assets:u.map(e=>e.address),maxAmountsIn:p,userData:s,fromInternalBalance:!!o}],tokensIn:u}}function te(e,t){let n=[...e.tokens.filter(t=>!e.address.toLowerCase().includes(t.address.toLowerCase())),{address:e.address,balance:e.totalShares,decimals:18}],a=n.findIndex(e=>e.address.toLowerCase()===t.address.toLowerCase());if(-1===a)throw Error("Reference amount must be relative to a token in the pool or its BPT");let i=n.map(e=>(0,P.v)(e.balance,e.decimals)),r=i[a],p=eH.divDownFixed(t.rawAmount,r),s=i.map(e=>eH.mulDownFixed(e,p)),o=n.map(({address:e,decimals:t},n)=>({address:e,decimals:t,rawAmount:s[n]})),u=o.pop();return{tokenAmounts:o,bptAmount:u}}var tt=async(e,t)=>{let n;if(e.referenceAmount.address===t.address)n=e.referenceAmount;else switch(t.protocolVersion){case 1:throw Error("CowAmm pools should use CowAmm helpers");case 2:{let a=await e1(t,e.chainId,e.rpcUrl);({bptAmount:n}=te(a,e.referenceAmount));break}case 3:{let a=await e4(t,e.chainId,e.rpcUrl);({bptAmount:n}=te(a,e.referenceAmount))}}return n};function tn(e){let t=Math.max(...e.pools.map(e=>e.level));return e.mainTokens.forEach(n=>{let a=e.pools.filter(e=>e.tokens.some(e=>e.address===n.address));if(a.length<1)throw Error("NestedPoolState, main token must exist as a token of a pool");if(a.length>1)throw Error("NestedPoolState, main token can't be token of more than 1 pool");if(a[0]&&t-a[0].level>1)throw Error("NestedPoolState, main token only supported to a max of 1 level of nesting")}),!0}var ta=((s=ta||{}).Unbalanced="Unbalanced",s.SingleToken="SingleToken",s.Proportional="Proportional",s),ti=((o=ti||{}).Unbalanced="Unbalanced",o.SingleTokenExactOut="SingleTokenExactOut",o.SingleTokenExactIn="SingleTokenExactIn",o.Proportional="Proportional",o.Recovery="Recovery",o),tr=e=>(0,_.E)([{type:"uint256"},{type:"uint256"}],[255n,e]),tp=((u=tp||{})[u.INIT=0]="INIT",u[u.EXACT_TOKENS_IN_FOR_BPT_OUT=1]="EXACT_TOKENS_IN_FOR_BPT_OUT",u[u.TOKEN_IN_FOR_EXACT_BPT_OUT=2]="TOKEN_IN_FOR_EXACT_BPT_OUT",u[u.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT=3]="ALL_TOKENS_IN_FOR_EXACT_BPT_OUT",u),ts=((y=ts||{})[y.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT=0]="EXACT_BPT_IN_FOR_ONE_TOKEN_OUT",y[y.BPT_IN_FOR_EXACT_TOKENS_OUT=1]="BPT_IN_FOR_EXACT_TOKENS_OUT",y[y.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT=2]="EXACT_BPT_IN_FOR_ALL_TOKENS_OUT",y),to=class e{constructor(){}static encodeInitPoolUserData(t){return e.initPool(t.amountsIn)}static encodeAddLiquidityUserData(t,n){switch(t){case"Unbalanced":return e.addLiquidityUnbalanced(n.maxAmountsInWithoutBpt,n.minimumBpt);case"SingleToken":if(void 0===n.tokenInIndex)throw eM;return e.addLiquiditySingleToken(n.minimumBpt,n.tokenInIndex);case"Proportional":return e.addLiquidityProportional(n.minimumBpt)}}static encodeRemoveLiquidityUserData(t,n){switch(t){case"Unbalanced":case"SingleTokenExactOut":return e.removeLiquidityUnbalanced(n.minAmountsOut,n.maxBptAmountIn);case"SingleTokenExactIn":if(void 0===n.tokenOutIndex)throw eq;return e.removeLiquiditySingleTokenExactIn(n.maxBptAmountIn,n.tokenOutIndex);case"Proportional":return e.removeLiquidityProportional(n.maxBptAmountIn);case"Recovery":return tr(n.maxBptAmountIn)}}};ee(to,"initPool",e=>(0,_.E)([{type:"uint256"},{type:"uint256[]"}],[BigInt(0),e])),ee(to,"addLiquidityUnbalanced",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256[]"},{type:"uint256"}],[BigInt(1),e,t])),ee(to,"addLiquiditySingleToken",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256"},{type:"uint256"}],[BigInt(2),e,BigInt(t)])),ee(to,"addLiquidityProportional",e=>(0,_.E)([{type:"uint256"},{type:"uint256"}],[BigInt(3),e])),ee(to,"removeLiquiditySingleTokenExactIn",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256"},{type:"uint256"}],[BigInt(0),e,BigInt(t)])),ee(to,"removeLiquidityProportional",e=>(0,_.E)([{type:"uint256"},{type:"uint256"}],[BigInt(2),e])),ee(to,"removeLiquidityUnbalanced",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256[]"},{type:"uint256"}],[BigInt(1),e,t]));var tu=async(e,t,n=-1)=>{let a=eJ(t.tokens,e.chainId);switch(e.kind){case"Unbalanced":{let t=e5(a,e.amountsIn);return{minimumBpt:0n,maxAmountsIn:t,tokenInIndex:void 0,maxAmountsInWithoutBpt:eY(t,n)}}case"SingleToken":{let t=a.filter((e,t)=>t!==n).findIndex(t=>t.isSameAddress(e.tokenIn));if(-1===t)throw Error("Can't find index of SingleToken");let i=Array(a.length).fill(0n);return i[t]=ew,{minimumBpt:e.bptOut.rawAmount,maxAmountsIn:i,tokenInIndex:t,maxAmountsInWithoutBpt:eY(i,n)}}case"Proportional":{let i=Array(a.length).fill(ew);return{minimumBpt:(await tt(e,t)).rawAmount,maxAmountsIn:i,tokenInIndex:void 0,maxAmountsInWithoutBpt:eY(i,n)}}}},ty=(e,t=-1)=>{switch(e.addLiquidityKind){case"Unbalanced":{let n=e.slippage.applyTo(e.bptOut.amount,-1),a=e.amountsIn.map(e=>e.amount);return{minimumBpt:n,maxAmountsIn:a,tokenInIndex:e.tokenInIndex,maxAmountsInWithoutBpt:eY(a,t)}}case"SingleToken":case"Proportional":{let n=e.amountsIn.map(t=>e.slippage.applyTo(t.amount));return{minimumBpt:e.bptOut.amount,maxAmountsIn:n,tokenInIndex:e.tokenInIndex,maxAmountsInWithoutBpt:eY(n,t)}}}},td=class{async query(e,t){let n=eJ(t.tokens,e.chainId),a=n.findIndex(e=>e.address===t.address),i=await tu(e,t,a),r=to.encodeAddLiquidityUserData(e.kind,i),{args:p,tokensIn:s}=e9({chainId:e.chainId,sortedTokens:n,poolId:t.id,sender:ef,recipient:ef,maxAmountsIn:i.maxAmountsIn,userData:r,fromInternalBalance:!1}),o=await e6(e.rpcUrl,e.chainId,p),u=new eb(e.chainId,t.address,18),y=eX.fromRawAmount(u,o.bptOut),d=o.amountsIn.map((e,t)=>eX.fromRawAmount(s[t],e));return{poolType:t.type,addLiquidityKind:e.kind,poolId:t.id,bptOut:y,amountsIn:d,tokenInIndex:i.tokenInIndex,chainId:e.chainId,protocolVersion:2,bptIndex:a}}buildCall(e){let t=ty(e,e.bptIndex),n=to.encodeAddLiquidityUserData(e.addLiquidityKind,t),{args:a}=e9({...e,sortedTokens:e.amountsIn.map(e=>e.token),maxAmountsIn:t.maxAmountsIn,userData:n,fromInternalBalance:!!e.fromInternalBalance,wethIsEth:!!e.wethIsEth});return{callData:(0,M.R)({abi:es,functionName:"joinPool",args:a}),to:eg[e.chainId],value:e8(e.amountsIn,!!e.wethIsEth),minBptOut:eX.fromRawAmount(e.bptOut.token,t.minimumBpt),maxAmountsIn:e.amountsIn.map((e,n)=>eX.fromRawAmount(e.token,t.maxAmountsIn[n]))}}buildCallWithPermit2(){throw eF}},tl=class e{constructor(){}static encodeInitPoolUserData(t){return e.initPool(t.maxAmountsIn)}};ee(tl,"encodeAddLiquidityUserData",(e,t)=>{switch(e){case"Unbalanced":return tl.addLiquidityUnbalanced(t.maxAmountsIn,t.minimumBpt);case"SingleToken":if(void 0===t.tokenInIndex)throw eM;return tl.addLiquiditySingleToken(t.minimumBpt,t.tokenInIndex);default:throw Error(`AddLiquidityKind not supported: ${e}`)}}),ee(tl,"encodeRemoveLiquidityUserData",(e,t)=>{switch(e){case"Unbalanced":case"SingleTokenExactOut":return tl.removeLiquidityUnbalanced(t.minAmountsOut,t.maxBptAmountIn);case"SingleTokenExactIn":if(void 0===t.tokenOutIndex)throw eq;return tl.removeLiquiditySingleTokenExactIn(t.maxBptAmountIn,t.tokenOutIndex);case"Proportional":return tl.removeLiquidityProportional(t.maxBptAmountIn);case"Recovery":return tr(t.maxBptAmountIn)}}),ee(tl,"initPool",e=>(0,_.E)([{type:"uint256"},{type:"uint256[]"}],[BigInt(0),e])),ee(tl,"addLiquidityUnbalanced",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256[]"},{type:"uint256"}],[BigInt(1),e,t])),ee(tl,"addLiquiditySingleToken",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256"},{type:"uint256"}],[BigInt(2),e,BigInt(t)])),ee(tl,"removeLiquiditySingleTokenExactIn",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256"},{type:"uint256"}],[BigInt(0),e,BigInt(t)])),ee(tl,"removeLiquidityProportional",e=>(0,_.E)([{type:"uint256"},{type:"uint256"}],[BigInt(1),e])),ee(tl,"removeLiquidityUnbalanced",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256[]"},{type:"uint256"}],[BigInt(2),e,t]));var tm=class{async query(e,t){let n=eJ(t.tokens,e.chainId),a=await tu(e,t),i=tl.encodeAddLiquidityUserData(e.kind,a),{args:r,tokensIn:p}=e9({chainId:e.chainId,sortedTokens:n,poolId:t.id,sender:ef,recipient:ef,maxAmountsIn:a.maxAmountsIn,userData:i}),s=await e6(e.rpcUrl,e.chainId,r),o=new eb(e.chainId,t.address,18),u=eX.fromRawAmount(o,s.bptOut),y=s.amountsIn.map((e,t)=>eX.fromRawAmount(p[t],e));return{poolType:t.type,addLiquidityKind:e.kind,poolId:t.id,bptOut:u,amountsIn:y,chainId:e.chainId,tokenInIndex:a.tokenInIndex,protocolVersion:t.protocolVersion}}buildCall(e){let t=ty(e),n=tl.encodeAddLiquidityUserData(e.addLiquidityKind,t),{args:a}=e9({...e,sortedTokens:e.amountsIn.map(e=>e.token),maxAmountsIn:t.maxAmountsIn,userData:n,fromInternalBalance:e.fromInternalBalance,wethIsEth:!!e.wethIsEth});return{callData:(0,M.R)({abi:es,functionName:"joinPool",args:a}),to:eg[e.chainId],value:e8(e.amountsIn,!!e.wethIsEth),minBptOut:eX.fromRawAmount(e.bptOut.token,t.minimumBpt),maxAmountsIn:e.amountsIn.map((e,n)=>eX.fromRawAmount(e.token,t.maxAmountsIn[n]))}}buildCallWithPermit2(){throw eF}},tc=((d=tc||{})[d.INIT=0]="INIT",d[d.EXACT_TOKENS_IN_FOR_BPT_OUT=1]="EXACT_TOKENS_IN_FOR_BPT_OUT",d[d.TOKEN_IN_FOR_EXACT_BPT_OUT=2]="TOKEN_IN_FOR_EXACT_BPT_OUT",d[d.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT=3]="ALL_TOKENS_IN_FOR_EXACT_BPT_OUT",d),tT=((l=tT||{})[l.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT=0]="EXACT_BPT_IN_FOR_ONE_TOKEN_OUT",l[l.EXACT_BPT_IN_FOR_TOKENS_OUT=1]="EXACT_BPT_IN_FOR_TOKENS_OUT",l[l.BPT_IN_FOR_EXACT_TOKENS_OUT=2]="BPT_IN_FOR_EXACT_TOKENS_OUT",l[l.MANAGEMENT_FEE_TOKENS_OUT=3]="MANAGEMENT_FEE_TOKENS_OUT",l),tb=class e{constructor(){}static encodeInitPoolUserData(t){return e.initPool(t.maxAmountsIn)}};ee(tb,"encodeAddLiquidityUserData",(e,t)=>{switch(e){case"Unbalanced":return tb.addLiquidityUnbalanced(t.maxAmountsIn,t.minimumBpt);case"SingleToken":if(void 0===t.tokenInIndex)throw eM;return tb.addLiquiditySingleToken(t.minimumBpt,t.tokenInIndex);case"Proportional":return tb.addLiquidityProportional(t.minimumBpt)}}),ee(tb,"encodeRemoveLiquidityUserData",(e,t)=>{switch(e){case"Unbalanced":case"SingleTokenExactOut":return tb.removeLiquidityUnbalanced(t.minAmountsOut,t.maxBptAmountIn);case"SingleTokenExactIn":if(void 0===t.tokenOutIndex)throw eq;return tb.removeLiquiditySingleTokenExactIn(t.maxBptAmountIn,t.tokenOutIndex);case"Proportional":return tb.removeLiquidityProportional(t.maxBptAmountIn);case"Recovery":return tr(t.maxBptAmountIn)}}),ee(tb,"initPool",e=>(0,_.E)([{type:"uint256"},{type:"uint256[]"}],[BigInt(0),e])),ee(tb,"addLiquidityUnbalanced",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256[]"},{type:"uint256"}],[BigInt(1),e,t])),ee(tb,"addLiquiditySingleToken",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256"},{type:"uint256"}],[BigInt(2),e,BigInt(t)])),ee(tb,"addLiquidityProportional",e=>(0,_.E)([{type:"uint256"},{type:"uint256"}],[BigInt(3),e])),ee(tb,"removeLiquiditySingleTokenExactIn",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256"},{type:"uint256"}],[BigInt(0),e,BigInt(t)])),ee(tb,"removeLiquidityProportional",e=>(0,_.E)([{type:"uint256"},{type:"uint256"}],[BigInt(1),e])),ee(tb,"removeLiquidityUnbalanced",(e,t)=>(0,_.E)([{type:"uint256"},{type:"uint256[]"},{type:"uint256"}],[BigInt(2),e,t]));var tf=class{async query(e,t){let n=eJ(t.tokens,e.chainId),a=await tu(e,t),i=tb.encodeAddLiquidityUserData(e.kind,a),{args:r,tokensIn:p}=e9({chainId:e.chainId,sortedTokens:n,poolId:t.id,sender:ef,recipient:ef,maxAmountsIn:a.maxAmountsIn,userData:i}),s=await e6(e.rpcUrl,e.chainId,r),o=new eb(e.chainId,t.address,18),u=eX.fromRawAmount(o,s.bptOut),y=s.amountsIn.map((e,t)=>eX.fromRawAmount(p[t],e));return{poolType:t.type,addLiquidityKind:e.kind,poolId:t.id,bptOut:u,amountsIn:y,chainId:e.chainId,tokenInIndex:a.tokenInIndex,protocolVersion:2}}buildCall(e){let t=ty(e),n=tb.encodeAddLiquidityUserData(e.addLiquidityKind,t),{args:a}=e9({...e,sortedTokens:e.amountsIn.map(e=>e.token),maxAmountsIn:t.maxAmountsIn,userData:n,fromInternalBalance:!!e.fromInternalBalance,wethIsEth:!!e.wethIsEth});return{callData:(0,M.R)({abi:es,functionName:"joinPool",args:a}),to:eg[e.chainId],value:e8(e.amountsIn,!!e.wethIsEth),minBptOut:eX.fromRawAmount(e.bptOut.token,t.minimumBpt),maxAmountsIn:e.amountsIn.map((e,n)=>eX.fromRawAmount(e.token,t.maxAmountsIn[n]))}}buildCallWithPermit2(){throw eF}},tI=class{constructor(e){ee(this,"addLiquidityTypes",{});let{customAddLiquidityTypes:t}=e||{};this.addLiquidityTypes={ComposableStable:new td,Gyro2:new tf,Gyro3:new tf,GyroE:new tf,MetaStable:new tm,Stable:new tm,Weighted:new tf,...t}}getAddLiquidity(e){if(!this.addLiquidityTypes[e])throw Error(`Unsupported pool type ${e}`);return this.addLiquidityTypes[e]}async query(e,t){return this.getAddLiquidity(t.type).query(e,t)}buildCall(e){return this.getAddLiquidity(e.poolType).buildCall(e)}buildCallWithPermit2(){throw eF}},th=async({rpcUrl:e,chainId:t},n,a)=>{let i=(0,q.v)({transport:(0,L.d)(e),chain:ek[t]}),{result:r}=await i.simulateContract({address:eO[t],abi:[...ei,...eo,...eu,...ep],functionName:"queryAddLiquidityUnbalanced",args:[n,a,"0x"]});return r},tw=async({rpcUrl:e,chainId:t,tokenIn:n},a,i)=>{let r=(0,q.v)({transport:(0,L.d)(e),chain:ek[t]}),{result:p}=await r.simulateContract({address:eO[t],abi:[...ei,...eo,...eu,...ep],functionName:"queryAddLiquiditySingleTokenExactOut",args:[a,n,i,"0x"]});return p},tA=async({rpcUrl:e,chainId:t},n,a)=>{let i=(0,q.v)({transport:(0,L.d)(e),chain:ek[t]}),{result:r}=await i.simulateContract({address:eO[t],abi:[...ei,...eo,...eu,...ep],functionName:"queryAddLiquidityProportional",args:[n,a,"0x"]});return[...r]},tx=class{async query(e,t){let n,a,i;let r=eJ(t.tokens,e.chainId),p=new eb(e.chainId,t.address,18);switch(e.kind){case"Proportional":{let s=await tt(e,t),o=await tA(e,t.address,s.rawAmount);a=r.map((e,t)=>eX.fromRawAmount(e,o[t])),n=eX.fromRawAmount(p,s.rawAmount),i=void 0;break}case"Unbalanced":{let s=e5(r,e.amountsIn),o=await th(e,t.address,s);n=eX.fromRawAmount(p,o),a=r.map((e,t)=>eX.fromRawAmount(e,s[t])),i=void 0;break}case"SingleToken":{n=eX.fromRawAmount(p,e.bptOut.rawAmount);let s=await tw(e,t.address,e.bptOut.rawAmount);a=r.map(t=>t.isSameAddress(e.tokenIn)?eX.fromRawAmount(t,s):eX.fromRawAmount(t,0n)),i=r.findIndex(t=>t.isSameAddress(e.tokenIn))}}return{poolType:t.type,poolId:t.id,addLiquidityKind:e.kind,bptOut:n,amountsIn:a,tokenInIndex:i,chainId:e.chainId,protocolVersion:3}}buildCall(e){let t;let n=ty(e);switch(e.addLiquidityKind){case"Proportional":t=(0,M.R)({abi:ei,functionName:"addLiquidityProportional",args:[e.poolId,n.maxAmountsIn,n.minimumBpt,!!e.wethIsEth,"0x"]});break;case"Unbalanced":t=(0,M.R)({abi:ei,functionName:"addLiquidityUnbalanced",args:[e.poolId,e.amountsIn.map(e=>e.amount),n.minimumBpt,!!e.wethIsEth,"0x"]});break;case"SingleToken":if(void 0===e.tokenInIndex)throw eM;t=(0,M.R)({abi:ei,functionName:"addLiquiditySingleTokenExactOut",args:[e.poolId,e.amountsIn[e.tokenInIndex].token.address,e.amountsIn[e.tokenInIndex].amount,e.bptOut.amount,!!e.wethIsEth,"0x"]})}return{callData:t,to:eO[e.chainId],value:e8(e.amountsIn,!!e.wethIsEth),minBptOut:eX.fromRawAmount(e.bptOut.token,n.minimumBpt),maxAmountsIn:e.amountsIn.map((e,t)=>eX.fromRawAmount(e.token,n.maxAmountsIn[t]))}}buildCallWithPermit2(e,t){let n=this.buildCall(e),a=[[],[],t.batch,t.signature,[n.callData]],i=(0,M.R)({abi:ei,functionName:"permitBatchAndCall",args:a});return{...n,callData:i}}};function tk(e,t){let n=e.map(e=>e.toLowerCase()),a=t.map(e=>e.toLowerCase());for(let e of n)if(!a.includes(e))throw Error(`Token ${e} not found in array`)}var tv=(e,t)=>{switch(e.kind){case"Unbalanced":tk(e.amountsIn.map(e=>e.address),t.tokens.map(e=>e.address));break;case"SingleToken":tk([e.tokenIn],t.tokens.map(e=>e.address));break;case"Proportional":tk([e.referenceAmount.address],[t.address,...t.tokens.map(e=>e.address)])}},tg=(e,t)=>{switch(e.kind){case"Unbalanced":tk(e.amountsOut.map(e=>e.address),t.tokens.map(e=>e.address));break;case"SingleTokenExactOut":tk([e.amountOut.address],t.tokens.map(e=>e.address));break;case"SingleTokenExactIn":tk([e.tokenOut],t.tokens.map(e=>e.address));break;case"Proportional":tk([e.bptIn.address],[t.address])}},tE=(e,t)=>{tk([e.bptIn.address],[t.address])},tR=e=>{let{tokens:t,address:n}=e;if(0>t.findIndex(e=>e.address===n))throw Error("INPUT_ERROR: Pool State should have BPT token included")},tO=e=>{let t=e.map(e=>e.address);if(t.length!==new Set(t).size)throw Error("Duplicate token addresses");if(e.length<2)throw Error("Minimum of 2 tokens required")},tC=class{validateInitPool(e,t){tk(e.amountsIn.map(e=>e.address),t.tokens.map(e=>e.address)),3===t.protocolVersion&&this.validateWethIsEth(e)}validateCreatePool(e){tO(e.tokens),3===e.protocolVersion&&e.tokens.forEach(({tokenType:e,rateProvider:t})=>{if(0!==e&&t===F.DR)throw Error("Only TokenType.STANDARD is allowed to have zeroAddress rateProvider")})}validateAddLiquidity(e,t){tv(e,t)}validateRemoveLiquidity(e,t){tg(e,t)}validateRemoveLiquidityRecovery(e,t){tE(e,t)}validateWethIsEth(e){if(e.wethIsEth&&!e.amountsIn.some(t=>e$(t.address,eB[e.chainId].wrapped)))throw Error("wethIsEth requires wrapped native asset as input")}},tS=class extends tC{validateAddLiquidity(e,t){super.validateAddLiquidity(e,t),tR(t)}validateRemoveLiquidity(e,t){super.validateRemoveLiquidity(e,t),tR(t)}validateRemoveLiquidityRecovery(e,t){super.validateRemoveLiquidityRecovery(e,t),tR(t)}validateCreatePool(e){if(super.validateCreatePool(e),e.tokens.length>5)throw Error("Composable stable pools can have a maximum of 5 tokens");if(e.amplificationParameter<=BigInt(0))throw Error("Amplification parameter must be greater than 0");if(e.amplificationParameter>BigInt(5e3))throw Error("Amplification parameter must be equal or lower than 5000")}},tB=class extends tC{validateInitPool(e,t){throw Error("Method not implemented.")}validateAddLiquidity(e,t){if("Proportional"!==e.kind)throw eN(e.kind,t.type);tv(e,t)}validateRemoveLiquidity(e,t){if("Proportional"!==e.kind)throw e_(e.kind,t.type);tg(e,t)}validateCreatePool(e){throw console.log(e),Error("Method not implemented.")}},tP=class extends tC{validateInitPool(e,t){throw Error("Method not implemented.")}validateAddLiquidity(e,t){if("Proportional"!==e.kind)throw eN(e.kind,t.type);tv(e,t)}validateRemoveLiquidity(e,t){if("Proportional"!==e.kind)throw e_(e.kind,t.type);tg(e,t)}validateCreatePool(e){throw console.log(e),Error("Method not implemented.")}},tM=class extends tC{validateCreatePool(e){throw Error("Create pool not supported for this pool type")}validateAddLiquidity(e,t){if("Proportional"===e.kind)throw eD(t.type);tv(e,t)}},tq=class extends tC{validateCreatePool(e){if(super.validateCreatePool(e),e.tokens.length>8)throw Error("Weighted pools can have a maximum of 8 tokens");if(e.tokens.reduce((e,{weight:t})=>e+t,0n)!==BigInt(1e18))throw Error("Weights must sum to 1e18");if(e.tokens.find(({weight:e})=>0n===e))throw Error("Weight cannot be 0")}},tL=class{constructor(){ee(this,"validators",{}),this.validators={ComposableStable:new tS,CowAmm:new tB,Gyro2:new tP,Gyro3:new tP,GyroE:new tP,MetaStable:new tM,Stable:new tM,Weighted:new tq}}getValidator(e){return this.validators[e]?this.validators[e]:(console.warn(`Pool type ${e} does not have a validator, using default.`),new tC)}validateInitPool(e,t){this.validateChain(e.chainId),this.getValidator(t.type).validateInitPool(e,t)}validateAddLiquidity(e,t){this.validateChain(e.chainId),this.getValidator(t.type).validateAddLiquidity(e,t)}validateRemoveLiquidity(e,t){this.validateChain(e.chainId),this.getValidator(t.type).validateRemoveLiquidity(e,t)}validateRemoveLiquidityRecovery(e,t){this.validateChain(e.chainId),this.getValidator(t.type).validateRemoveLiquidityRecovery(e,t)}validateCreatePool(e){this.validateChain(e.chainId),this.getValidator(e.poolType).validateCreatePool(e)}validateChain(e){if(!(e in ex))throw Error(`Unsupported ChainId: ${e}`)}static validateBuildCallWithPermit2(e){if(3!==e.protocolVersion)throw eF}},tD=class{async query(e,t){let n=await e0(t,e.chainId,e.rpcUrl),{bptAmount:a}=e2(n,e.referenceAmount),{tokenAmounts:i,bptAmount:r}=e2(n,a),p=eX.fromRawAmount(new eb(e.chainId,r.address,r.decimals),r.rawAmount),s=i.map(t=>eX.fromRawAmount(new eb(e.chainId,t.address,t.decimals),t.rawAmount));return{poolType:t.type,poolId:t.id,addLiquidityKind:e.kind,bptOut:p,amountsIn:s,tokenInIndex:void 0,chainId:e.chainId,protocolVersion:1}}buildCall(e){if("Proportional"!==e.addLiquidityKind)throw Error(`Error: Add Liquidity ${e.addLiquidityKind} is not supported. Cow AMM pools support Add Liquidity Proportional only.`);if(e.wethIsEth)throw Error("Cow AMM pools do not support adding liquidity with ETH.");let t=ty(e);return{callData:(0,M.R)({abi:eZ,functionName:"joinPool",args:[t.minimumBpt,t.maxAmountsInWithoutBpt]}),to:e.poolId,value:0n,minBptOut:eX.fromRawAmount(e.bptOut.token,t.minimumBpt),maxAmountsIn:e.amountsIn.map((e,n)=>eX.fromRawAmount(e.token,t.maxAmountsIn[n]))}}buildCallWithPermit2(){throw eF}},tN=class{constructor(e){this.config=e,ee(this,"inputValidator",new tL)}query(e,t){switch(this.inputValidator.validateAddLiquidity(e,t),t.protocolVersion){case 1:return new tD().query(e,t);case 2:return new tI(this.config).query(e,t);case 3:return new tx().query(e,t)}}buildCall(e){switch(e.protocolVersion){case 1:return new tD().buildCall(e);case 2:if("sender"in e)return new tI(this.config).buildCall(e);break;case 3:if(!("sender"in e))return new tx().buildCall(e)}throw Error("buildCall input/version mis-match")}buildCallWithPermit2(e,t){return tL.validateBuildCallWithPermit2(e),new tx().buildCallWithPermit2(e,t)}},t_=class{constructor(){}};ee(t_,"encodeCalldataAuthorization",(e,t,n)=>{let a=(0,U.vk)((0,V.NC)(t),{size:32}),{v:i,r,s:p}=(0,z.c)(n),s=(0,U.vk)((0,V.NC)(i),{size:32}),o=(0,U.vk)(r,{size:32}),u=(0,U.vk)(p,{size:32});return(0,W.zo)([e,a,s,o,u])}),ee(t_,"signJoinAuthorization",(e,t,n,a,i,r)=>t_.signAuthorizationFor("JoinPool",e,t,n,a,i,r)),ee(t_,"signExitAuthorization",(e,t,n,a,i,r)=>t_.signAuthorizationFor("ExitPool",e,t,n,a,i,r)),ee(t_,"signSwapAuthorization",(e,t,n,a,i,r)=>t_.signAuthorizationFor("Swap",e,t,n,a,i,r)),ee(t_,"signBatchSwapAuthorization",(e,t,n,a,i,r)=>t_.signAuthorizationFor("BatchSwap",e,t,n,a,i,r)),ee(t_,"signSetRelayerApprovalAuthorization",(e,t,n,a,i,r)=>t_.signAuthorizationFor("SetRelayerApproval",e,t,n,a,i,r)),ee(t_,"signAuthorizationFor",async(e,t,n,a,i,r=ew,p)=>{let s=await t.getChainId(),o=eg[s],u=p;return void 0===u&&(u=await t.readContract({abi:es,address:o,functionName:"getNextNonce",args:[n]})),t.signTypedData({account:n,domain:{name:"Balancer V2 Vault",version:"1",chainId:s,verifyingContract:o},types:{[e]:[{name:"calldata",type:"bytes"},{name:"sender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]},primaryType:e,message:{calldata:i,sender:a,nonce:u,deadline:r}})});var tF=class e{static toChainedReference(t,n=!0){let a=n?e.CHAINED_REFERENCE_TEMP_PREFIX:e.CHAINED_REFERENCE_READONLY_PREFIX,i=(0,U.vk)((0,V.NC)(t),{dir:"left",size:30}),r=(0,W.zo)([a,i]);return(0,K.y_)(r)}static fromChainedReference(e){let t=(0,H.tP)((0,V.NC)(e),2);return(0,K.y_)(t)}static encodePeekChainedReferenceValue(e){return(0,M.R)({abi:er,functionName:"peekChainedReferenceValue",args:[e]})}static encodeSetRelayerApproval(e,t,n){return(0,M.R)({abi:er,functionName:"setRelayerApproval",args:[e,t,n]})}static encodeApproveVault(e,t){return(0,M.R)({abi:er,functionName:"approveVault",args:[e,t]})}};ee(tF,"CHAINED_REFERENCE_TEMP_PREFIX","0xba10"),ee(tF,"CHAINED_REFERENCE_READONLY_PREFIX","0xba11"),ee(tF,"signRelayerApproval",async(e,t,n)=>{let a=(0,M.R)({abi:es,functionName:"setRelayerApproval",args:[t,e,!0]}),i=await t_.signSetRelayerApprovalAuthorization(n,t,e,a);return t_.encodeCalldataAuthorization("0x",ew,i)});var tU=tF,tV=e=>{let t=[],n=[];for(let a of e){let{wethIsEth:e,chainId:i,sortedTokens:r,poolId:p,poolAddress:s,poolType:o,kind:u,sender:y,recipient:d,maxAmountsIn:l,minBptOut:m,fromInternalBalance:c,outputReference:T}=a,b=e?e7([...r],i):[...r],f=e8([...r].map((e,t)=>eX.fromRawAmount(e,l[t].amount)),!!e),I=l.map(e=>e.amount),h=tW(o,I.filter((e,t)=>!r[t].isSameAddress(s)),m),w={assets:b.map(e=>e.address),maxAmountsIn:I,userData:h,fromInternalBalance:c},A=(0,M.R)({abi:er,functionName:"joinPool",args:[p,u,y,d,w,f,T]});t.push(A),n.push(f)}return{encodedCalls:t,values:n}},tW=(e,t,n)=>{switch(e){case"Weighted":return tb.addLiquidityUnbalanced(t,n);case"ComposableStable":return to.addLiquidityUnbalanced(t,n);default:throw Error(`Unsupported pool type: ${e}`)}},tK=async(e,t,n)=>{let a=(0,q.v)({transport:(0,L.d)(t),chain:ek[e]}),{data:i}=await a.call({...eI,to:ev[e],data:n}),r=(0,G.k)({abi:[...ea,...eo,...eu,...ep],functionName:"vaultActionsQueryMulticall",data:i});return(0,X.r)([{type:"uint256"}],r[r.length-1])[0]},tH=((m=tH||{})[m.WEIGHTED=0]="WEIGHTED",m[m.LEGACY_STABLE=1]="LEGACY_STABLE",m[m.COMPOSABLE_STABLE=2]="COMPOSABLE_STABLE",m[m.COMPOSABLE_STABLE_V2=3]="COMPOSABLE_STABLE_V2",m),tz=({amountsIn:e,chainId:t,fromInternalBalance:n},a)=>{let i=a.sort((e,t)=>e.level-t.level),r=[];for(let a of i){let p=a.tokens.sort((e,t)=>e.index-t.index).map(e=>new eb(t,e.address,e.decimals)),s=tG(p,e,r);s.every(e=>0n===e.amount&&!e.isRef)||r.push({chainId:t,sortedTokens:p,poolId:a.id,poolAddress:a.address,poolType:a.type,kind:"ComposableStable"===a.type?3:0,sender:tX(s,ef,t),recipient:"0x",maxAmountsIn:s,minBptOut:0n,fromInternalBalance:n??!1,outputReference:tU.toChainedReference(BigInt(i.indexOf(a)))})}return t$(r,ef),r},tG=(e,t,n)=>e.map(e=>{let a=t.find(t=>e.isSameAddress(t.address));if(void 0!==a)return{amount:a.rawAmount,isRef:!1};let i=n.find(t=>ej(t.poolId)===e.address);return void 0!==i?{amount:i.outputReference,isRef:!0}:{amount:0n,isRef:!1}}),tX=(e,t,n)=>e.some(e=>!e.isRef&&e.amount>0n)?t:ev[n],t$=(e,t)=>{for(let n of e){let a=e.find(e=>e.maxAmountsIn.some(e=>e.amount===n.outputReference));void 0!==a?n.recipient=a.sender:n.recipient=t}},tY=(e,t)=>{let n=t.mainTokens.map(t=>new eb(e.chainId,t.address,t.decimals));return e.amountsIn.map(e=>{let t=n.find(t=>t.isSameAddress(e.address));if(void 0===t)throw Error(`Adding liquidity with ${e.address} requires it to exist within mainTokens`);return eX.fromRawAmount(t,e.rawAmount)})},tj=e=>{let t=e.callsAttributes[0].chainId;if(e.wethIsEth&&!e.amountsIn.some(e=>e.token.isUnderlyingEqual(eB[t])))throw Error("Adding liquidity with native asset requires wrapped native asset to exist within amountsIn")},tQ=class{async query(e,t){let n=tY(e,t);tn(t);let a=tz(e,t.pools),{encodedCalls:i}=tV(a),r=tU.encodePeekChainedReferenceValue(a[a.length-1].outputReference);i.push(r);let p=(0,M.R)({abi:ea,functionName:"vaultActionsQueryMulticall",args:[i]}),s=await tK(e.chainId,e.rpcUrl,p),o=new eb(e.chainId,a[a.length-1].poolAddress,18);return{callsAttributes:a,amountsIn:n,bptOut:eX.fromRawAmount(o,s)}}buildCall(e){tj(e);let t=e.slippage.applyTo(e.bptOut.amount,-1);e.callsAttributes[e.callsAttributes.length-1]={...e.callsAttributes[e.callsAttributes.length-1],minBptOut:t},e.callsAttributes=e.callsAttributes.map(t=>({...t,sender:t.sender===ef?e.accountAddress:t.sender,recipient:t.recipient===ef?e.accountAddress:t.recipient,wethIsEth:e.wethIsEth}));let{encodedCalls:n,values:a}=tV(e.callsAttributes);void 0!==e.relayerApprovalSignature&&n.unshift(tU.encodeSetRelayerApproval(ev[e.callsAttributes[0].chainId],!0,e.relayerApprovalSignature));let i=(0,M.R)({abi:ea,functionName:"multicall",args:[n]}),r=a.reduce((e,t)=>e+t,0n);return{callData:i,to:ev[e.callsAttributes[0].chainId],value:r,minBptOut:t}}},tZ=async(e,t,n)=>await e.readContract({abi:[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],address:t,functionName:"nonces",args:[n]}),tJ=(e,t,n=-1)=>{switch(t.kind){case"Unbalanced":return{minAmountsOut:e5(e,t.amountsOut),tokenOutIndex:void 0,maxBptAmountIn:ew};case"SingleTokenExactOut":return{minAmountsOut:e5(e,[t.amountOut]),tokenOutIndex:e.filter((e,t)=>t!==n).findIndex(e=>e.isSameAddress(t.amountOut.address)),maxBptAmountIn:ew};case"SingleTokenExactIn":return{minAmountsOut:Array(e.length).fill(1n),tokenOutIndex:e.filter((e,t)=>t!==n).findIndex(e=>e.isSameAddress(t.tokenOut)),maxBptAmountIn:t.bptIn.rawAmount};case"Proportional":case"Recovery":return{minAmountsOut:Array(e.length).fill(1n),tokenOutIndex:void 0,maxBptAmountIn:t.bptIn.rawAmount}}},t0=e=>{switch(e.removeLiquidityKind){case"Unbalanced":case"SingleTokenExactOut":return{minAmountsOut:e.amountsOut.map(e=>e.amount),tokenOutIndex:e.tokenOutIndex,maxBptAmountIn:e.slippage.applyTo(e.bptIn.amount)};case"SingleTokenExactIn":if(void 0===e.tokenOutIndex)throw eq;return{minAmountsOut:e.amountsOut.map(t=>e.slippage.applyTo(t.amount,-1)),tokenOutIndex:e.tokenOutIndex,maxBptAmountIn:e.bptIn.amount};case"Proportional":case"Recovery":return{minAmountsOut:e.amountsOut.map(t=>e.slippage.applyTo(t.amount,-1)),tokenOutIndex:e.tokenOutIndex,maxBptAmountIn:e.bptIn.amount}}};ee(class{},"signRemoveLiquidityApproval",async e=>{let t=t0(e),n=e.nonce??await tZ(e.client,e.bptIn.token.address,e.owner),{permitApproval:a,permitSignature:i}=await t2(e.client,e.bptIn.token.address,e.owner,eO[e.chainId],n,t.maxBptAmountIn,e.deadline);return{batch:[a],signatures:[i]}});var t2=async(e,t,n,a,i,r=ew,p=ew)=>{let s=await t6(e,t),o=await e.signTypedData({account:n,message:{owner:n,spender:a,value:r,nonce:i,deadline:p},domain:s,primaryType:"Permit",types:{Permit:[{name:"owner",type:"address"},{name:"spender",type:"address"},{name:"value",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]}});return{permitApproval:{token:t,owner:n,spender:a,amount:r,nonce:i,deadline:p},permitSignature:o}},t6=async(e,t)=>{let[,n,a,i,r]=await e.readContract({abi:ey,address:t,functionName:"eip712Domain",args:[]});return{name:n,version:a,chainId:Number(i),verifyingContract:r}},t5=BigInt("0xffffffffffff"),t1=BigInt("0xffffffffffffffffffffffffffffffffffffffff"),t3=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),t4=t1,t8=t5,t7=t3;function t9(e,t){return{name:"Permit2",chainId:t,verifyingContract:e}}BigInt(0);var ne=[{name:"token",type:"address"},{name:"amount",type:"uint160"},{name:"expiration",type:"uint48"},{name:"nonce",type:"uint48"}],nt={PermitDetails:ne,PermitSingle:[{name:"details",type:"PermitDetails"},{name:"spender",type:"address"},{name:"sigDeadline",type:"uint256"}]},nn={PermitDetails:ne,PermitBatch:[{name:"details",type:"PermitDetails[]"},{name:"spender",type:"address"},{name:"sigDeadline",type:"uint256"}]};function na(e){return!Array.isArray(e.details)}var ni=class e{constructor(){}static getPermitSingleData(e,t,n){if(e.sigDeadline>t7)throw Error("SIG_DEADLINE_OUT_OF_RANGE");let a=t9(t,n);return nr(e.details),{domain:a,values:e}}static getPermitBatchData(e,t,n){if(e.sigDeadline>t7)throw Error("SIG_DEADLINE_OUT_OF_RANGE");let a=t9(t,n);return e.details.forEach(nr),{domain:a,values:e}}static getPermitData(e,t,n){if(e.sigDeadline>t7)throw Error("SIG_DEADLINE_OUT_OF_RANGE");let a=t9(t,n);return na(e)?(nr(e.details),{domain:a,types:nt,values:e}):(e.details.forEach(nr),{domain:a,types:nn,values:e})}static hash(t,n,a){if(na(t)){let{domain:i,values:r}=e.getPermitSingleData(t,n,a);return(0,$.Jv)({domain:i,types:nt,primaryType:"PermitSingle",message:r})}{let{domain:i,values:r}=e.getPermitBatchData(t,n,a);return(0,$.Jv)({domain:i,types:nn,primaryType:"PermitBatch",message:r})}}};function nr(e){if(e.nonce>t5)throw Error("NONCE_OUT_OF_RANGE");if(e.amount>t4)throw Error("AMOUNT_OUT_OF_RANGE");if(e.expiration>t8)throw Error("EXPIRATION_OUT_OF_RANGE")}function np(e,t,n){let a;return a=0===t?e.applyTo(n.amount,-1):e.applyTo(n.amount),eX.fromRawAmount(n.token,a)}var ns=class{static async signAddLiquidityApproval(e){if(e.nonces&&e.nonces.length!==e.amountsIn.length)throw Error("Nonces length doesn't match amountsIn length");if(e.expirations&&e.expirations.length!==e.amountsIn.length)throw Error("Expirations length doesn't match amountsIn length");let t=ty(e),n=eO[e.chainId],a=[];for(let i=0;i<e.amountsIn.length;i++)a.push(await nu(e.client,e.amountsIn[i].token.address,e.owner,n,t.maxAmountsIn[i],e.expirations?e.expirations[i]:void 0,e.nonces?e.nonces[i]:void 0));return no(e.client,e.owner,n,a)}static async signSwapApproval(e){let t;if(0===e.queryOutput.swapKind)t=e.queryOutput.amountIn;else{let n=e.queryOutput;t=np(e.slippage,1,n.expectedAmountIn)}let n=await e.client.getChainId(),a=e.queryOutput.pathAmounts?eC[n]:eO[n],i=[await nu(e.client,t.token.address,e.owner,a,t.amount,e.expiration,e.nonce)];return await no(e.client,e.owner,a,i)}},no=async(e,t,n,a,i=t7)=>{let r={details:a,spender:n,sigDeadline:i},p=await e.getChainId(),{domain:s,types:o,values:u}=ni.getPermitData(r,eS[p],p);return{batch:r,signature:await e.signTypedData({account:t,message:{...u},domain:s,primaryType:"PermitBatch",types:o})}},nu=async(e,t,n,a,i=t4,r=Number(t8),p)=>{let s;return s=void 0===p?await ny(e,t,n,a):p,{token:t,amount:i,expiration:r,nonce:s}},ny=async(e,t,n,a)=>{let i=await e.getChainId();return(await e.readContract({abi:ep,address:eS[i],functionName:"allowance",args:[n,t,a]}))[1]},nd=class e{constructor(e){ee(this,"amount"),ee(this,"decimal"),ee(this,"percentage"),ee(this,"bps"),this.amount=BigInt(e),this.decimal=parseFloat((0,N.d)(this.amount)),this.percentage=100*this.decimal,this.bps=1e4*this.decimal}static fromRawAmount(t){return new e(t)}static fromDecimal(t){let n=(0,Y.f)(t);return e.fromRawAmount(n)}static fromPercentage(t){let n=Number(t)/100;return e.fromDecimal(`${n}`)}static fromBasisPoints(t){let n=Number(t)/1e4;return e.fromDecimal(`${n}`)}};function nl({chainId:e,wethIsEth:t,sortedTokens:n,poolId:a,sender:i,recipient:r,minAmountsOut:p,userData:s,toInternalBalance:o}){let u=e&&t?e7([...n],e):[...n];return{args:[a,i,r,{assets:u.map(e=>e.address),minAmountsOut:p,userData:s,toInternalBalance:!!o}],tokensOut:u}}async function nm(e,t,n){let a=(0,q.v)({transport:(0,L.d)(e),chain:ek[t]}),{result:[i,r]}=await a.simulateContract({address:eR[t],abi:en,functionName:"queryExit",args:n});return{bptIn:i,amountsOut:r}}var nc=class{async query(e,t){let n=eJ(t.tokens,e.chainId),a=tJ(n,e),i=tb.encodeRemoveLiquidityUserData(e.kind,a),{args:r,tokensOut:p}=nl({chainId:e.chainId,poolId:t.id,sortedTokens:n,sender:ef,recipient:ef,minAmountsOut:a.minAmountsOut,userData:i}),s=await nm(e.rpcUrl,e.chainId,r),o=new eb(e.chainId,t.address,18),u=eX.fromRawAmount(o,s.bptIn),y=s.amountsOut.map((e,t)=>eX.fromRawAmount(p[t],e));return{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:u,amountsOut:y,tokenOutIndex:a.tokenOutIndex,protocolVersion:t.protocolVersion,chainId:e.chainId}}async queryRemoveLiquidityRecovery(e,t){let{tokenAmounts:n}=te(await e1(t,e.chainId,e.rpcUrl),e.bptIn),a=new eb(e.chainId,t.address,18),i=eX.fromRawAmount(a,e.bptIn.rawAmount),r=n.map(t=>eX.fromRawAmount(new eb(e.chainId,t.address,t.decimals),t.rawAmount));return{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:i,amountsOut:r,tokenOutIndex:void 0,protocolVersion:t.protocolVersion,chainId:e.chainId}}buildCall(e){let t=t0(e),n=tb.encodeRemoveLiquidityUserData(e.removeLiquidityKind,t),{args:a}=nl({poolId:e.poolId,sortedTokens:e.amountsOut.map(e=>e.token),sender:e.sender,recipient:e.recipient,minAmountsOut:t.minAmountsOut,userData:n,toInternalBalance:!!e.toInternalBalance,wethIsEth:!!e.wethIsEth,chainId:e.chainId});return{callData:(0,M.R)({abi:es,functionName:"exitPool",args:a}),to:eg[e.chainId],value:0n,maxBptIn:eX.fromRawAmount(e.bptIn.token,t.maxBptAmountIn),minAmountsOut:e.amountsOut.map((e,n)=>eX.fromRawAmount(e.token,t.minAmountsOut[n]))}}buildCallWithPermit(){throw Error("buildCallWithPermit is not supported on v2")}},nT=class{async query(e,t){let n=eJ(t.tokens,e.chainId),a=t.tokens.findIndex(e=>e.address===t.address),i=tJ(n,e,a),r={...i,minAmountsOut:[...i.minAmountsOut.slice(0,a),...i.minAmountsOut.slice(a+1)]},p=to.encodeRemoveLiquidityUserData(e.kind,r),{args:s,tokensOut:o}=nl({chainId:e.chainId,poolId:t.id,sortedTokens:n,sender:ef,recipient:ef,minAmountsOut:i.minAmountsOut,userData:p}),u=await nm(e.rpcUrl,e.chainId,s),y=new eb(e.chainId,t.address,18),d=eX.fromRawAmount(y,u.bptIn),l=u.amountsOut.map((e,t)=>eX.fromRawAmount(o[t],e));return{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:d,amountsOut:l,tokenOutIndex:i.tokenOutIndex,bptIndex:a,protocolVersion:t.protocolVersion,chainId:e.chainId}}async queryRemoveLiquidityRecovery(e,t){var n,a;let{tokenAmounts:i}=te(await e1(t,e.chainId,e.rpcUrl),e.bptIn),r=new eb(e.chainId,t.address,18),p=eX.fromRawAmount(r,e.bptIn.rawAmount),s=t.tokens.findIndex(e=>e.address===t.address),o=i.map(t=>eX.fromRawAmount(new eb(e.chainId,t.address,t.decimals),t.rawAmount));return n=o,a=eX.fromRawAmount(r,0n),o=-1===s?n:[...n.slice(0,s),a,...n.slice(s)],{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:p,amountsOut:o,tokenOutIndex:void 0,protocolVersion:t.protocolVersion,chainId:e.chainId}}buildCall(e){let t=t0(e),n={...t,minAmountsOut:[...t.minAmountsOut.slice(0,e.bptIndex),...t.minAmountsOut.slice(e.bptIndex+1)]},a=to.encodeRemoveLiquidityUserData(e.removeLiquidityKind,n),{args:i}=nl({poolId:e.poolId,sortedTokens:e.amountsOut.map(e=>e.token),sender:e.sender,recipient:e.recipient,minAmountsOut:t.minAmountsOut,userData:a,toInternalBalance:!!e.toInternalBalance,wethIsEth:!!e.wethIsEth,chainId:e.chainId});return{callData:(0,M.R)({abi:es,functionName:"exitPool",args:i}),to:eg[e.chainId],value:0n,maxBptIn:eX.fromRawAmount(e.bptIn.token,t.maxBptAmountIn),minAmountsOut:e.amountsOut.map((e,n)=>eX.fromRawAmount(e.token,t.minAmountsOut[n]))}}buildCallWithPermit(){throw Error("buildCallWithPermit is not supported on v2")}},nb=class{async query(e,t){let n=eJ(t.tokens,e.chainId),a=tJ(n,e),i=tl.encodeRemoveLiquidityUserData(e.kind,a),{args:r,tokensOut:p}=nl({chainId:e.chainId,poolId:t.id,sortedTokens:n,sender:ef,recipient:ef,minAmountsOut:a.minAmountsOut,userData:i}),s=await nm(e.rpcUrl,e.chainId,r),o=new eb(e.chainId,t.address,18),u=eX.fromRawAmount(o,s.bptIn),y=s.amountsOut.map((e,t)=>eX.fromRawAmount(p[t],e));return{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:u,amountsOut:y,tokenOutIndex:a.tokenOutIndex,protocolVersion:t.protocolVersion,chainId:e.chainId}}async queryRemoveLiquidityRecovery(e,t){let{tokenAmounts:n}=te(await e1(t,e.chainId,e.rpcUrl),e.bptIn),a=new eb(e.chainId,t.address,18),i=eX.fromRawAmount(a,e.bptIn.rawAmount),r=n.map(t=>eX.fromRawAmount(new eb(e.chainId,t.address,t.decimals),t.rawAmount));return{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:i,amountsOut:r,tokenOutIndex:void 0,protocolVersion:t.protocolVersion,chainId:e.chainId}}buildCall(e){let t=t0(e),n=tl.encodeRemoveLiquidityUserData(e.removeLiquidityKind,t),{args:a}=nl({poolId:e.poolId,sortedTokens:e.amountsOut.map(e=>e.token),sender:e.sender,recipient:e.recipient,minAmountsOut:t.minAmountsOut,userData:n,toInternalBalance:!!e.toInternalBalance,wethIsEth:!!e.wethIsEth,chainId:e.chainId});return{callData:(0,M.R)({abi:es,functionName:"exitPool",args:a}),to:eg[e.chainId],value:0n,maxBptIn:eX.fromRawAmount(e.bptIn.token,t.maxBptAmountIn),minAmountsOut:e.amountsOut.map((e,n)=>eX.fromRawAmount(e.token,t.minAmountsOut[n]))}}buildCallWithPermit(){throw Error("buildCallWithPermit is not supported on v2")}},nf=class{constructor(e){ee(this,"removeLiquidityTypes",{});let{customRemoveLiquidityTypes:t}=e||{};this.removeLiquidityTypes={ComposableStable:new nT,Gyro2:new nc,Gyro3:new nc,GyroE:new nc,MetaStable:new nb,Stable:new nb,Weighted:new nc,...t}}getRemoveLiquidity(e){if(!this.removeLiquidityTypes[e])throw Error(`Unsupported pool type ${e}`);return this.removeLiquidityTypes[e]}async query(e,t){return this.getRemoveLiquidity(t.type).query(e,t)}async queryRemoveLiquidityRecovery(e,t){return this.getRemoveLiquidity(t.type).queryRemoveLiquidityRecovery(e,t)}buildCall(e){return this.getRemoveLiquidity(e.poolType).buildCall(e)}buildCallWithPermit(){throw Error("buildCallWithPermit is not supported on v2")}},nI=async({chainId:e,rpcUrl:t,amountOut:n},a)=>{let i=(0,q.v)({transport:(0,L.d)(t),chain:ek[e]}),{result:r}=await i.simulateContract({address:eO[e],abi:[...ei,...eo,...eu,...ep],functionName:"queryRemoveLiquiditySingleTokenExactOut",args:[a,n.address,n.rawAmount,"0x"]});return r},nh=async({chainId:e,rpcUrl:t,bptIn:n,tokenOut:a},i)=>{let r=(0,q.v)({transport:(0,L.d)(t),chain:ek[e]}),{result:p}=await r.simulateContract({address:eO[e],abi:[...ei,...eo,...eu,...ep],functionName:"queryRemoveLiquiditySingleTokenExactIn",args:[i,n.rawAmount,a,"0x"]});return p},nw=async({chainId:e,rpcUrl:t,bptIn:n},a)=>{let i=(0,q.v)({transport:(0,L.d)(t),chain:ek[e]}),{result:r}=await i.simulateContract({address:eO[e],abi:[...ei,...eo,...eu,...ep],functionName:"queryRemoveLiquidityProportional",args:[a,n.rawAmount,"0x"]});return r},nA=async({chainId:e,rpcUrl:t,bptIn:n},a)=>{let i=(0,q.v)({transport:(0,L.d)(t),chain:ek[e]}),{result:r}=await i.simulateContract({address:eO[e],abi:[...ei,...eo,...eu,...ep],functionName:"queryRemoveLiquidityRecovery",args:[a,n.rawAmount]});return r},nx=(e,t)=>{if(void 0===e.tokenOutIndex)throw eq;return(0,M.R)({abi:ei,functionName:"removeLiquiditySingleTokenExactOut",args:[e.poolId,t,e.amountsOut[e.tokenOutIndex].token.address,e.amountsOut[e.tokenOutIndex].amount,!!e.wethIsEth,"0x"]})},nk=(e,t)=>{if(void 0===e.tokenOutIndex)throw Error("RemoveLiquidityKind.SingleTokenExactOut should have tokenOutIndex");return(0,M.R)({abi:ei,functionName:"removeLiquiditySingleTokenExactIn",args:[e.poolId,e.bptIn.amount,e.amountsOut[e.tokenOutIndex].token.address,t[e.tokenOutIndex],!!e.wethIsEth,"0x"]})},nv=(e,t)=>(0,M.R)({abi:ei,functionName:"removeLiquidityProportional",args:[e.poolId,e.bptIn.amount,t,!!e.wethIsEth,"0x"]}),ng=e=>(0,M.R)({abi:ei,functionName:"removeLiquidityRecovery",args:[e.poolId,e.bptIn.amount]}),nE=class{async query(e,t){let n,a;let i=eJ(t.tokens,e.chainId),r=tJ(i,e);switch(e.kind){case"Unbalanced":throw eL;case"SingleTokenExactOut":n=await nI(e,t.address),a=r.minAmountsOut;break;case"SingleTokenExactIn":{n=r.maxBptAmountIn;let p=await nh(e,t.address);a=i.map(t=>t.isSameAddress(e.tokenOut)?p:0n)}break;case"Proportional":n=r.maxBptAmountIn,a=await nw(e,t.address);break;case"Recovery":n=r.maxBptAmountIn,a=await nA(e,t.address)}let p=new eb(e.chainId,t.address,18);return{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:eX.fromRawAmount(p,n),amountsOut:i.map((e,t)=>eX.fromRawAmount(e,a[t])),tokenOutIndex:r.tokenOutIndex,protocolVersion:t.protocolVersion,chainId:e.chainId}}async queryRemoveLiquidityRecovery(e,t){let{tokenAmounts:n}=te(await e4(t,e.chainId,e.rpcUrl),e.bptIn),a=eX.fromRawAmount(new eb(e.chainId,e.bptIn.address,e.bptIn.decimals),e.bptIn.rawAmount),i=n.map(t=>eX.fromRawAmount(new eb(e.chainId,t.address,t.decimals),t.rawAmount));return{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:a,amountsOut:i,tokenOutIndex:void 0,protocolVersion:t.protocolVersion,chainId:e.chainId}}buildCall(e){let t;let n=t0(e);switch(e.removeLiquidityKind){case"Unbalanced":throw eL;case"SingleTokenExactOut":t=nx(e,n.maxBptAmountIn);break;case"SingleTokenExactIn":t=nk(e,n.minAmountsOut);break;case"Proportional":t=nv(e,n.minAmountsOut);break;case"Recovery":t=ng(e)}return{callData:t,to:eO[e.chainId],value:0n,maxBptIn:eX.fromRawAmount(e.bptIn.token,n.maxBptAmountIn),minAmountsOut:e.amountsOut.map((e,t)=>eX.fromRawAmount(e.token,n.minAmountsOut[t]))}}buildCallWithPermit(e,t){let n=this.buildCall(e),a=[t.batch,t.signatures,{details:[],spender:F.DR,sigDeadline:0n},"0x",[n.callData]],i=(0,M.R)({abi:ei,functionName:"permitBatchAndCall",args:a});return{...n,callData:i}}},nR=class{async query(e,t){let{tokenAmounts:n}=e2(await e0(t,e.chainId,e.rpcUrl),e.bptIn),a=eX.fromRawAmount(new eb(e.chainId,e.bptIn.address,e.bptIn.decimals),e.bptIn.rawAmount),i=n.map(t=>eX.fromRawAmount(new eb(e.chainId,t.address,t.decimals),t.rawAmount));return{poolType:t.type,removeLiquidityKind:e.kind,poolId:t.id,bptIn:a,amountsOut:i,tokenOutIndex:void 0,protocolVersion:t.protocolVersion,chainId:e.chainId}}queryRemoveLiquidityRecovery(){throw Error("Remove Liquidity Recovery is not supported for Cow AMM pools")}buildCall(e){if("Proportional"!==e.removeLiquidityKind)throw Error(`Error: Remove Liquidity ${e.removeLiquidityKind} is not supported. Cow AMM pools support Remove Liquidity Proportional only.`);let t=t0(e);return{callData:(0,M.R)({abi:eZ,functionName:"exitPool",args:[t.maxBptAmountIn,t.minAmountsOut]}),to:e.poolId,value:0n,maxBptIn:eX.fromRawAmount(e.bptIn.token,t.maxBptAmountIn),minAmountsOut:e.amountsOut.map((e,n)=>eX.fromRawAmount(e.token,t.minAmountsOut[n]))}}buildCallWithPermit(){throw eF}},nO=class{constructor(e){this.config=e,ee(this,"inputValidator",new tL)}async query(e,t){switch(this.inputValidator.validateRemoveLiquidity(e,t),t.protocolVersion){case 1:return new nR().query(e,t);case 2:return new nf(this.config).query(e,t);case 3:return new nE().query(e,t)}}async queryRemoveLiquidityRecovery(e,t){switch(this.inputValidator.validateRemoveLiquidityRecovery(e,t),t.protocolVersion){case 1:return new nR().queryRemoveLiquidityRecovery();case 2:return new nf(this.config).queryRemoveLiquidityRecovery(e,t);case 3:return new nE().queryRemoveLiquidityRecovery(e,t)}}buildCall(e){let t="sender"in e;switch(e.protocolVersion){case 1:return new nR().buildCall(e);case 2:if(t)return new nf(this.config).buildCall(e);break;case 3:if(!t)return new nE().buildCall(e)}throw Error("buildCall input/version mis-match")}buildCallWithPermit(e,t){if(3===e.protocolVersion)return new nE().buildCallWithPermit(e,t);throw Error("buildCall with Permit signatures is only available for v3")}},nC=(e,t)=>{let n=[];for(let a of e){let e;let{wethIsEth:i,chainId:r,sortedTokens:p,poolId:s,poolAddress:o,poolType:u,kind:y,sender:d,recipient:l,bptAmountIn:m,minAmountsOut:c,toInternalBalance:T,outputReferences:b,tokenOutIndex:f}=a,I=[...p];if(i&&(I=e7([...p],r)),t)e=nS(u,m.amount);else{if(void 0===f)throw eq;let t=p.findIndex(e=>e.isSameAddress(o));e=nB(-1===t||f<t?f:f-1,u,m.amount)}let h={assets:I.map(e=>e.address),minAmountsOut:c,userData:e,toInternalBalance:T},w=(0,M.R)({abi:er,functionName:"exitPool",args:[s,y,d,l,h,b]});n.push(w)}return n},nS=(e,t)=>{switch(e){case"Weighted":return tb.removeLiquidityProportional(t);case"ComposableStable":return to.removeLiquidityProportional(t);default:throw Error(`Unsupported pool type ${e}`)}},nB=(e,t,n)=>{if(void 0===e)throw eq;switch(t){case"Weighted":return tb.removeLiquiditySingleTokenExactIn(n,e);case"ComposableStable":return to.removeLiquiditySingleTokenExactIn(n,e);default:throw Error(`Unsupported pool type ${t}`)}},nP=async(e,t,n,a)=>{let i=(0,q.v)({transport:(0,L.d)(t),chain:ek[e]}),{data:r}=await i.call({...eI,to:ev[e],data:n}),p=(0,G.k)({abi:ea,functionName:"vaultActionsQueryMulticall",data:r}),s=[];return p.forEach((e,t)=>{a.includes(t)&&s.push((0,X.r)([{type:"uint256"}],e)[0])}),s},nM=(e,t)=>{let n=[],a=[];if(t)e.forEach(t=>{t.outputReferences.forEach(i=>{let r=t.sortedTokens[Number(i.index)];if(!e.some(e=>r.isSameAddress(e.poolAddress))){n.push(r);let e=tU.toChainedReference(tU.fromChainedReference(i.key),!1);a.push(tU.encodePeekChainedReferenceValue(e))}})});else{let t=e[e.length-1],i=t.sortedTokens[t.tokenOutIndex];n.push(i);let r=tU.toChainedReference(tU.fromChainedReference(t.outputReferences[0].key),!1);a.push(tU.encodePeekChainedReferenceValue(r))}return{peekCalls:a,tokensOut:n}},nq=(e,t,n)=>{let a;let{bptAmountIn:i,chainId:r,toInternalBalance:p=!1}=e,s=t.sort((e,t)=>t.level-e.level);if(n)a=nL(s,r,ef,i,p);else{let{tokenOut:t}=e;a=nD(s,r,ef,i,p,t)}let o=new eb(r,s[0].address,18);return{callsAttributes:a,bptAmountIn:eX.fromRawAmount(o,i)}},nL=(e,t,n,a,i)=>{let r=[];for(let p of e){let s=p.tokens.sort((e,t)=>e.index-t.index).map(e=>new eb(t,e.address,e.decimals)),o=s.filter(e=>!e.isSameAddress(p.address));r.push({chainId:t,sortedTokens:s,poolId:p.id,poolAddress:p.address,poolType:p.type,kind:"ComposableStable"===p.type?3:0,sender:nF(r,p.address,n),recipient:nU(o,e,n,t),bptAmountIn:n_(p,a,r,!0),minAmountsOut:Array(s.length).fill(0n),toInternalBalance:i,outputReferences:o.map(t=>({key:tU.toChainedReference(10n*BigInt(e.indexOf(p))+BigInt(s.indexOf(t))),index:BigInt(s.indexOf(t))}))})}return r},nD=(e,t,n,a,i,r)=>{let p=nN(r,e),s=[];for(let e=0;e<p.length;e++){let o=p[e],u=o.tokens.sort((e,t)=>e.index-t.index).map(e=>new eb(t,e.address,e.decimals)),y=e===p.length-1,d=y?r:p[e+1].address,l=u.findIndex(e=>e.isSameAddress(d));s.push({chainId:t,sortedTokens:u,poolId:o.id,poolAddress:o.address,poolType:o.type,kind:"ComposableStable"===o.type?3:0,sender:0===e?n:ev[t],recipient:y?n:ev[t],bptAmountIn:n_(o,a,s,!1),minAmountsOut:Array(u.length).fill(0n),toInternalBalance:i,outputReferences:[{key:tU.toChainedReference(10n*BigInt(p.indexOf(o))+BigInt(l)),index:BigInt(l)}],tokenOutIndex:l})}return s},nN=(e,t)=>{let n=t[0],a=[],i=e;for(;i!==n.address;){let e=t.find(e=>e.address!==i&&e.tokens.some(e=>e.address===i));a.unshift(e),i=e.address}return a},n_=(e,t,n,a)=>{let i,r;return 0===n.length?{amount:t,isRef:!1}:(a?r=(i=n.find(t=>t.sortedTokens.map(e=>e.address).includes(e.address))).sortedTokens.map(e=>e.address).indexOf(e.address):(i=n[n.length-1],r=0),{amount:i.outputReferences.find(e=>e.index===BigInt(r)).key,isRef:!0})},nF=(e,t,n)=>{let a=e.find(e=>e.sortedTokens.map(e=>e.address).includes(t));return void 0!==a?a.recipient:n},nU=(e,t,n,a)=>e.some(e=>!t.some(t=>e.isSameAddress(t.address)))?n:ev[a],nV=(e,t)=>{let n=void 0===("tokenOut"in e?e.tokenOut:void 0),a=t.mainTokens.map(t=>new eb(e.chainId,t.address,t.decimals));return n||nW(e,a),n},nW=(e,t)=>{if(void 0===t.find(t=>t.isSameAddress(e.tokenOut)))throw Error(`Removing liquidity to ${e.tokenOut} requires it to exist within main tokens`)},nK=e=>{if(e.wethIsEth&&!e.amountsOut.some(t=>t.token.isSameAddress(eB[e.chainId].wrapped)))throw Error("Removing liquidity to native asset requires wrapped native asset to exist within amounts out")},nH=class{async query(e,t){let n=nV(e,t);tn(t);let{callsAttributes:a,bptAmountIn:i}=nq(e,t.pools,n),r=nC(a,n),{peekCalls:p,tokensOut:s}=nM(a,n),o=0,u=[];a.forEach((e,t)=>{s.forEach((n,a)=>{e.sortedTokens.some(e=>e.isSameAddress(n.address))&&(o++,r.splice(t+o,0,p[a]),u.push(t+o))})});let y=(0,M.R)({abi:ea,functionName:"vaultActionsQueryMulticall",args:[r]}),d=await nP(e.chainId,e.rpcUrl,y,u);return{callsAttributes:a,bptAmountIn:i,amountsOut:s.map((e,t)=>eX.fromRawAmount(e,d[t])),isProportional:n,chainId:e.chainId}}buildCall(e){nK(e);let t=e.amountsOut.map(t=>eX.fromRawAmount(t.token,e.slippage.applyTo(t.amount,-1)));e.callsAttributes.forEach(n=>{t.forEach((e,a)=>{let i=n.sortedTokens.findIndex(t=>t.isSameAddress(e.token.address));-1!==i&&(n.minAmountsOut[i]=t[a].amount)}),n.wethIsEth=!!e.wethIsEth,n.sender=n.sender===ef?e.accountAddress:n.sender,n.recipient=n.recipient===ef?e.accountAddress:n.recipient});let n=nC(e.callsAttributes,e.isProportional);return void 0!==e.relayerApprovalSignature&&n.unshift(tU.encodeSetRelayerApproval(ev[e.callsAttributes[0].chainId],!0,e.relayerApprovalSignature)),{callData:(0,M.R)({abi:ea,functionName:"multicall",args:[n]}),to:ev[e.callsAttributes[0].chainId],minAmountsOut:t}}};function nz(e){if(!e.every(t=>t.inputAmount.token.isEqual(e[0].inputAmount.token)))throw Error("Input amount can only be calculated if all paths have the same input token");return e.map(e=>e.inputAmount).reduce((e,t)=>e.add(t))}function nG(e){if(!e.every(t=>t.outputAmount.token.isEqual(e[0].outputAmount.token)))throw Error("Output amount can only be calculated if all paths have the same output token");return e.map(e=>e.outputAmount).reduce((e,t)=>e.add(t))}var nX=class{constructor(e,t,n,a,i,r){if(ee(this,"pools"),ee(this,"isBuffer"),ee(this,"tokens"),ee(this,"outputAmount"),ee(this,"inputAmount"),0===n.length||t.length<2)throw Error("Invalid path: must contain at least 1 pool and 2 tokens.");if(t.length!==n.length+1)throw Error("Invalid path: tokens length must equal pools length + 1");let p=new eb(e,t[0].address,t[0].decimals),s=new eb(e,t[t.length-1].address,t[t.length-1].decimals);this.pools=n,this.isBuffer=r||Array(this.pools.length).fill(!1),this.tokens=t,this.inputAmount=eX.fromRawAmount(p,a),this.outputAmount=eX.fromRawAmount(s,i)}},n$=class{constructor({chainId:e,paths:t,swapKind:n}){if(ee(this,"chainId"),ee(this,"isBatchSwap"),ee(this,"paths"),ee(this,"assets"),ee(this,"swapKind"),ee(this,"swaps"),ee(this,"inputAmount"),ee(this,"outputAmount"),0===t.length)throw Error("Invalid swap: must contain at least 1 path.");this.paths=t.map(t=>new nX(e,t.tokens.map(e=>({...e,address:e.address.toLowerCase()})),t.pools.map(e=>e.toLowerCase()),t.inputAmountRaw,t.outputAmountRaw,void 0)),this.chainId=e,this.swapKind=n,this.inputAmount=nz(this.paths),this.outputAmount=nG(this.paths),this.isBatchSwap=this.paths.length>1||this.paths[0].pools.length>1,this.assets=[...new Set(this.paths.flatMap(e=>e.tokens).map(e=>e.address))];let a=this.getSwaps(this.paths);this.swaps=a}get quote(){return 0===this.swapKind?this.outputAmount:this.inputAmount}async query(e,t){let n=(0,q.v)({chain:ek[this.chainId],transport:e?(0,L.d)(e):(0,L.d)()}),a=(0,j.uN)({address:eR[this.chainId],abi:en,client:n});return this.isBatchSwap?this.queryBatchSwap(a,t):this.querySingleSwap(a,t)}async querySingleSwap(e,t){let{result:n}=await e.simulate.querySwap([this.swaps,eP],{blockNumber:t});return 0===this.swapKind?{swapKind:0,expectedAmountOut:eX.fromRawAmount(this.outputAmount.token,n),amountIn:this.inputAmount}:{swapKind:1,expectedAmountIn:eX.fromRawAmount(this.inputAmount.token,n),amountOut:this.outputAmount}}async queryBatchSwap(e,t){let{result:n}=await e.simulate.queryBatchSwap([this.swapKind,this.swaps,this.assets,eP],{blockNumber:t});return 0===this.swapKind?{swapKind:0,expectedAmountOut:eX.fromRawAmount(this.outputAmount.token,eU(n[this.assets.indexOf(this.outputAmount.token.address)])),amountIn:this.inputAmount}:{swapKind:1,expectedAmountIn:eX.fromRawAmount(this.inputAmount.token,eU(n[this.assets.indexOf(this.inputAmount.token.address)])),amountOut:this.outputAmount}}convertWrappedToZero(e,t){return t.toLowerCase()===eB[e].wrapped.toLowerCase()?ef:t}queryCallData(){return this.isBatchSwap?(0,M.R)({abi:en,functionName:"queryBatchSwap",args:[this.swapKind,this.swaps,this.assets,eP]}):(0,M.R)({abi:en,functionName:"querySwap",args:[this.swaps,eP]})}limitsBatchSwap(e){let t=Array(this.assets.length).fill(0n);if(!this.isBatchSwap)throw Error("Limits: Non batchSwap path.");for(let n=0;n<this.assets.length;n++)this.assets[n]===this.inputAmount.token.address&&(0===this.swapKind?t[n]=this.inputAmount.amount:t[n]=e.amount),this.assets[n]===this.outputAmount.token.address&&(0===this.swapKind?t[n]=-1n*e.amount:t[n]=-1n*this.outputAmount.amount);return t}buildCall(e){let t,n;t=0===e.queryOutput.swapKind?np(e.slippage,0,e.queryOutput.expectedAmountOut):np(e.slippage,1,e.queryOutput.expectedAmountIn);let a={sender:e.sender,recipient:e.recipient,fromInternalBalance:!1,toInternalBalance:!1};if(this.isBatchSwap){let i=this.limitsBatchSwap(t);n=this.callDataBatchSwap(i,e.deadline??ew,a,!!e.wethIsEth)}else n=this.callDataSingleSwap(t.amount,e.deadline??ew,a,!!e.wethIsEth);return 0===this.swapKind?{to:eg[this.chainId],callData:n,value:this.value(t,!!e.wethIsEth),minAmountOut:t}:{to:eg[this.chainId],callData:n,value:this.value(t,!!e.wethIsEth),maxAmountIn:t}}buildCallWithPermit2(){throw Error("buildCallWithPermit2 is not supported on v2")}value(e,t){let n=0n;return t&&this.inputAmount.token.address===eB[this.chainId].wrapped&&(n=0===this.swapKind?this.inputAmount.amount:e.amount),n}callDataSingleSwap(e,t,n,a){let i={...this.swaps};return a&&(i.assetIn=this.convertWrappedToZero(this.chainId,i.assetIn),i.assetOut=this.convertWrappedToZero(this.chainId,i.assetOut)),(0,M.R)({abi:es,functionName:"swap",args:[i,n,e,t]})}callDataBatchSwap(e,t,n,a){return(0,M.R)({abi:es,functionName:"batchSwap",args:[this.swapKind,this.swaps,a?this.assets.map(e=>this.convertWrappedToZero(this.chainId,e)):this.assets,n,e,t]})}getSwaps(e){let t;if(this.isBatchSwap)t=[],0===this.swapKind?e.map(e=>{e.pools.map((n,a)=>{t.push({poolId:n,assetInIndex:BigInt(this.assets.indexOf(e.tokens[a].address)),assetOutIndex:BigInt(this.assets.indexOf(e.tokens[a+1].address)),amount:0===a?e.inputAmount.amount:0n,userData:"0x"})})}):e.map(e=>{let n=[...e.pools].reverse(),a=[...e.tokens].reverse();n.map((n,i)=>{t.push({poolId:n,assetInIndex:BigInt(this.assets.indexOf(a[i+1].address)),assetOutIndex:BigInt(this.assets.indexOf(a[i].address)),amount:0===i?e.outputAmount.amount:0n,userData:"0x"})})});else{let n=e[0];t={poolId:n.pools[0],kind:this.swapKind,assetIn:n.tokens[0].address,assetOut:n.tokens[1].address,amount:0===this.swapKind?n.inputAmount.amount:n.outputAmount.amount,userData:"0x"}}return t}},nY=class{constructor({chainId:e,paths:t,swapKind:n}){if(ee(this,"chainId"),ee(this,"isBatchSwap"),ee(this,"paths"),ee(this,"swapKind"),ee(this,"swaps"),ee(this,"inputAmount"),ee(this,"outputAmount"),0===t.length)throw Error("Invalid swap: must contain at least 1 path.");this.paths=t.map(t=>new nX(e,t.tokens,t.pools,t.inputAmountRaw,t.outputAmountRaw,t.isBuffer)),this.chainId=e,this.swapKind=n,this.inputAmount=nz(this.paths),this.outputAmount=nG(this.paths),this.isBatchSwap=t.length>1||t[0].pools.length>1,this.swaps=this.getSwaps(this.paths)}get quote(){return 0===this.swapKind?this.outputAmount:this.inputAmount}async query(e,t){let n=(0,q.v)({chain:ek[this.chainId],transport:e?(0,L.d)(e):(0,L.d)()});return this.isBatchSwap?this.queryBatchSwap(n,t):this.querySingleSwap(n,t)}async querySingleSwap(e,t){let n=(0,j.uN)({address:eO[this.chainId],abi:[...ei,...eo,...eu,...ep],client:e});if("exactAmountIn"in this.swaps){let{result:e}=await n.simulate.querySwapSingleTokenExactIn([this.swaps.pool,this.swaps.tokenIn,this.swaps.tokenOut,this.swaps.exactAmountIn,"0x"],{blockNumber:t});return{swapKind:0,expectedAmountOut:eX.fromRawAmount(this.outputAmount.token,e),amountIn:this.inputAmount}}if("exactAmountOut"in this.swaps){let{result:e}=await n.simulate.querySwapSingleTokenExactOut([this.swaps.pool,this.swaps.tokenIn,this.swaps.tokenOut,this.swaps.exactAmountOut,"0x"],{blockNumber:t});return{swapKind:1,expectedAmountIn:eX.fromRawAmount(this.inputAmount.token,e),amountOut:this.outputAmount}}throw Error("Unsupported V3 Query")}getSwapsWithLimits(e){let t=0n;return 0===this.swapKind?{swapsWithLimits:this.swaps.map((n,a)=>{let i=e?e[a]:0n;return t+=i,{...n,minAmountOut:i}}),totalPathLimits:t}:{swapsWithLimits:this.swaps.map((n,a)=>{let i=e?e[a]:0n;return t+=i,{...n,maxAmountIn:i}}),totalPathLimits:t}}async queryBatchSwap(e,t){let n=(0,j.uN)({address:eC[this.chainId],abi:[...et,...eo,...eu,...ep],client:e}),a=this.getSwapsWithLimits();if(0===this.swapKind){let{result:e}=await n.simulate.querySwapExactIn([a.swapsWithLimits,"0x"],{blockNumber:t});if(1!==e[1].length)throw Error("Swaps only support paths with matching tokenIn>tokenOut");return{swapKind:0,expectedAmountOut:eX.fromRawAmount(this.outputAmount.token,e[2][0]),amountIn:this.inputAmount,pathAmounts:e[0]}}let{result:i}=await n.simulate.querySwapExactOut([a.swapsWithLimits,"0x"],{blockNumber:t});if(1!==i[1].length)throw Error("Swaps only support paths with matching tokenIn>tokenOut");return{swapKind:1,expectedAmountIn:eX.fromRawAmount(this.inputAmount.token,i[2][0]),amountOut:this.outputAmount,pathAmounts:i[0]}}queryCallData(){let e;if(this.isBatchSwap){let t=this.getSwapsWithLimits();e=0===this.swapKind?(0,M.R)({abi:et,functionName:"querySwapExactIn",args:[t.swapsWithLimits,"0x"]}):(0,M.R)({abi:et,functionName:"querySwapExactOut",args:[t.swapsWithLimits,"0x"]})}else if("exactAmountIn"in this.swaps)e=(0,M.R)({abi:ei,functionName:"querySwapSingleTokenExactIn",args:[this.swaps.pool,this.swaps.tokenIn,this.swaps.tokenOut,this.swaps.exactAmountIn,"0x"]});else if("exactAmountOut"in this.swaps)e=(0,M.R)({abi:ei,functionName:"querySwapSingleTokenExactOut",args:[this.swaps.pool,this.swaps.tokenIn,this.swaps.tokenOut,this.swaps.exactAmountOut,"0x"]});else throw Error("Incorrect V3 Swap");return e}buildCall(e){let t,n;if(t=0===e.queryOutput.swapKind?np(e.slippage,0,e.queryOutput.expectedAmountOut):np(e.slippage,1,e.queryOutput.expectedAmountIn),this.isBatchSwap){let a=function(e,t,n){let a;if(!t.pathAmounts)return;let i=0n;a=0===t.swapKind?t.pathAmounts.map(t=>{let n=e.applyTo(t,-1);return i+=n,n}):t.pathAmounts.map(t=>{let n=e.applyTo(t);return i+=n,n});let r=n-i;return a[0]=a[0]+r,a}(e.slippage,e.queryOutput,t.amount);if(!a)throw Error("V3 BatchSwaps need path limits for call construction");n={to:eC[this.chainId],callData:this.callDataBatchSwap(t.amount,a,e.deadline??ew,!!e.wethIsEth),value:this.value(t,!!e.wethIsEth)}}else n={to:eO[this.chainId],callData:this.callDataSingleSwap(t,e.deadline??ew,!!e.wethIsEth),value:this.value(t,!!e.wethIsEth)};return 0===this.swapKind?{...n,minAmountOut:t}:{...n,maxAmountIn:t}}buildCallWithPermit2(e,t){let n=this.buildCall(e),a=[[],[],t.batch,t.signature,[n.callData]],i=(0,M.R)({abi:et,functionName:"permitBatchAndCall",args:a});return{...n,callData:i}}callDataSingleSwap(e,t,n){let a;if("exactAmountIn"in this.swaps)a=(0,M.R)({abi:ei,functionName:"swapSingleTokenExactIn",args:[this.swaps.pool,this.swaps.tokenIn,this.swaps.tokenOut,this.swaps.exactAmountIn,e.amount,t,n,"0x"]});else if("exactAmountOut"in this.swaps)a=(0,M.R)({abi:ei,functionName:"swapSingleTokenExactOut",args:[this.swaps.pool,this.swaps.tokenIn,this.swaps.tokenOut,this.swaps.exactAmountOut,e.amount,t,n,"0x"]});else throw Error("Incorrect V3 Swap");return a}callDataBatchSwap(e,t,n,a){let i;let r=this.getSwapsWithLimits(t);if(0===this.swapKind){if(this.swaps.length!==t.length)throw Error("Must have a limit for each path.");if(r.totalPathLimits!==e)throw Error(`minAmountOut mismatch, ${e} ${r.totalPathLimits}`);i=(0,M.R)({abi:et,functionName:"swapExactIn",args:[r.swapsWithLimits,n,a,"0x"]})}else{if(this.swaps.length!==t.length)throw Error("Must have a limit for each path.");if(r.totalPathLimits!==e)throw Error(`maxAmountIn mismatch, ${e} ${r.totalPathLimits}`);i=(0,M.R)({abi:et,functionName:"swapExactOut",args:[r.swapsWithLimits,n,a,"0x"]})}return i}value(e,t){let n=0n;if(t&&this.inputAmount.token.address===eB[this.chainId].wrapped){if(this.isBatchSwap){if(0===this.swapKind)for(let e of this.swaps)n+=e.exactAmountIn;else n=e.amount}else if("exactAmountIn"in this.swaps)n=this.swaps.exactAmountIn;else if("exactAmountOut"in this.swaps)n=e.amount;else throw Error("Incorrect V3 Swap")}return n}getSwaps(e){let t;if(this.isBatchSwap)0===this.swapKind?(t=[],t=e.map(e=>({tokenIn:e.inputAmount.token.address,exactAmountIn:e.inputAmount.amount,steps:e.pools.map((t,n)=>({pool:t,tokenOut:e.tokens[n+1].address,isBuffer:e.isBuffer[n]}))}))):(t=[],t=e.map(e=>({tokenIn:e.inputAmount.token.address,exactAmountOut:e.outputAmount.amount,steps:e.pools.map((t,n)=>({pool:t,tokenOut:e.tokens[n+1].address,isBuffer:e.isBuffer[n]}))})));else{let n=e[0],a=n.pools[0],i=n.tokens[0].address,r=n.tokens[1].address;t=0===this.swapKind?{pool:a,tokenIn:i,tokenOut:r,exactAmountIn:n.inputAmount.amount}:{pool:a,tokenIn:i,tokenOut:r,exactAmountOut:n.outputAmount.amount}}return t}},nj=class{constructor(e){ee(this,"swap"),ee(this,"protocolVersion"),function(e){if(0===e.length)throw Error("Invalid swap: must contain at least 1 path.");(function(e){if(!e.every(e=>!e.isBuffer||3===e.protocolVersion))throw Error("Unsupported swap: buffers not supported in V2.")})(e),function(e){if(!e.every(e=>!e.isBuffer||e.isBuffer.length===e.pools.length))throw Error("Unsupported swap: buffers and pools must have same length.")}(e);let t=e[0].protocolVersion;if(!e.every(e=>e.protocolVersion===t))throw Error("Unsupported swap: all paths must use same Balancer version.");let n=e[0].tokens[0].address.toLowerCase(),a=e[0].tokens[e[0].tokens.length-1].address.toLowerCase();if(!e.every(e=>e.tokens[0].address.toLowerCase()===n&&e.tokens[e.tokens.length-1].address.toLowerCase()===a))throw Error("Unsupported swap: all paths must start/end with same token.")}(e.paths);let t=e.paths[0].protocolVersion;switch(t){case 2:this.swap=new n$(e);break;case 3:this.swap=new nY(e);break;default:throw Error(`SDK does not support swap for vault version: ${t}`)}this.protocolVersion=t}get quote(){return 0===this.swap.swapKind?this.outputAmount:this.inputAmount}get inputAmount(){return this.swap.inputAmount}get outputAmount(){return this.swap.outputAmount}async query(e,t){return this.swap.query(e,t)}queryCallData(){return this.swap.queryCallData()}buildCall(e){let t="sender"in e;if(3===this.protocolVersion&&t)throw Error("Cannot define sender/recipient in V3");if(2===this.protocolVersion&&!t)throw Error("Sender/recipient must be defined in V2");return this.swap.buildCall(e)}buildCallWithPermit2(e,t){return tL.validateBuildCallWithPermit2({protocolVersion:this.protocolVersion}),this.swap.buildCallWithPermit2(e,t)}},nQ=class{};ee(nQ,"addLiquiditySingleToken",async(e,t)=>{let n=new tN,{amountsIn:a}=await n.query(e,t),i=new nO,r={chainId:e.chainId,rpcUrl:e.rpcUrl,bptIn:e.bptOut,tokenOut:e.tokenIn,kind:"SingleTokenExactIn"},{amountsOut:p}=await i.query(r,t),s=eJ(t.tokens,e.chainId).findIndex(t=>t.isSameAddress(e.tokenIn));return nJ(a[s],p[s])}),ee(nQ,"addLiquidityUnbalanced",async(e,t)=>{let n=new tN,{amountsIn:a,bptOut:i}=await n.query(e,t),r=a.map(e=>e.token),p=new nO,s={chainId:e.chainId,rpcUrl:e.rpcUrl,bptIn:i.toInputAmount(),kind:"Proportional"},{amountsOut:o}=await p.query(s,t),u=o.map((e,t)=>e.amount-a[t].amount),y=[];for(let e=0;e<u.length;e++)0n===u[e]?y.push(0n):y.push(await c(e));let d=0;y.some(e=>0n!==e)&&(d=await m(u,y));let l=eX.fromRawAmount(a[d].token,eU(u[d]));return nJ(a[d],a[d].sub(l));async function m(n,a){let i=a.findIndex(e=>e===eW(a.filter(e=>e<0n))),p=a.filter(e=>0n!==e);for(let s=0;s<p.length-1;s++){let p,s,o;let u=a.findIndex(e=>e===eV(a.filter(e=>e>0n)));i=a.findIndex(e=>e===eW(a.filter(e=>e<0n)));let y=0n,d=0n;a[u]<eU(a[i])?(p=0,s=u,o=i,y=eU(n[s])):(p=1,s=i,o=u,d=eU(n[s]));let l=new nj({chainId:e.chainId,paths:[{tokens:[r[u].toInputToken(),r[i].toInputToken()],pools:[t.id],inputAmountRaw:y,outputAmountRaw:d,protocolVersion:t.protocolVersion}],swapKind:p}),m=await l.query(e.rpcUrl),T=0===m.swapKind?m.expectedAmountOut:m.expectedAmountIn;n[s]=0n,a[s]=0n,n[o]=n[o]+T.amount,a[o]=await c(o)}return i}async function c(a){let i=eX.fromRawAmount(r[a],eU(u[a])),{bptOut:p}=await n.query({...e,amountsIn:[i.toInputAmount()]},t),s=u[a]>=0n?1n:-1n;return p.amount*s}}),ee(nQ,"addLiquidityNested",async(e,t)=>{let n=[],a=new tN,i=t.pools.sort((e,t)=>e.level-t.level),r=[],p=[];for(let t of i){if(0===t.level){if(0===(n=e.amountsIn.filter(e=>t.tokens.some(t=>t.address.toLowerCase()===e.address.toLowerCase()))).length)continue}else n=[...p,...e.amountsIn].filter(e=>t.tokens.some(t=>t.address.toLowerCase()===e.address.toLowerCase()));let i={chainId:e.chainId,rpcUrl:e.rpcUrl,amountsIn:n,kind:"Unbalanced"},s={...t,protocolVersion:2},o=await nQ.addLiquidityUnbalanced(i,s);r.push(o);let{bptOut:u}=await a.query(i,s);p.push(u.toInputAmount())}let s=r.reduce((e,t)=>e+t.amount,0n);return nd.fromRawAmount(s)}),ee(nQ,"removeLiquidity",async(e,t)=>{let n=new nO,{bptIn:a,amountsOut:i}=await n.query(e,t),r=new tN,p={chainId:e.chainId,rpcUrl:e.rpcUrl,amountsIn:i.map(e=>e.toInputAmount()),kind:"Unbalanced"},{bptOut:s}=await r.query(p,t);return nJ(a,s)}),ee(nQ,"removeLiquidityNested",async(e,t)=>{let n=new nH,{bptAmountIn:a,amountsOut:i}=await n.query(e,t),r=new tQ,p={chainId:e.chainId,rpcUrl:e.rpcUrl,fromInternalBalance:e.toInternalBalance,amountsIn:i.map(e=>e.toInputAmount())},{bptOut:s}=await r.query(p,t);return nJ(a,s)}),ee(nQ,"swap",async(e,t,n)=>{let a,i,r,p;let s=new nj(e),o=await s.query(t,n);0===o.swapKind?(a=o.pathAmounts??[o.expectedAmountOut.amount],i=e.paths.map(e=>e.inputAmountRaw)):(i=o.pathAmounts??[o.expectedAmountIn.amount],a=e.paths.map(e=>e.outputAmountRaw));let u=new nj({...e,paths:e.paths.map((e,t)=>({...e,tokens:[...e.tokens].reverse(),pools:[...e.pools].reverse(),outputAmountRaw:i[t],inputAmountRaw:a[t]}))}),y=await u.query(t,n),d=0===e.swapKind?0:e.paths[0].tokens.length-1,l=new eb(e.chainId,e.paths[0].tokens[d].address,e.paths[0].tokens[d].decimals);return"expectedAmountOut"in y?(r=s.inputAmount,p=eX.fromRawAmount(l,y.expectedAmountOut.amount)):(r=eX.fromRawAmount(l,y.expectedAmountIn.amount),p=s.outputAmount),nJ(r,p)});var nZ=nQ,nJ=(e,t)=>{let n=eH.divDownFixed(e.scale18-t.scale18,2n*e.scale18);return nd.fromRawAmount(n)},n0=class e{constructor(e){ee(this,"amount"),ee(this,"decimal"),ee(this,"percentage"),ee(this,"bps"),this.amount=BigInt(e)>0n?BigInt(e):-1n*BigInt(e),this.decimal=parseFloat((0,N.d)(this.amount)),this.percentage=100*this.decimal,this.bps=1e4*this.decimal}static fromRawAmount(t){return new e(t)}static fromDecimal(t){let n=(0,Y.f)(t);return e.fromRawAmount(n)}static fromPercentage(t){let n=Number(t)/100;return e.fromDecimal(`${n}`)}static fromBasisPoints(t){let n=Number(t)/1e4;return e.fromDecimal(`${n}`)}applyTo(e,t=1){return eH.mulDownFixed(e,BigInt(t)*this.amount+0xde0b6b3a7640000n)}},n2=((c=n2||{})[c.FromAuraBal=0]="FromAuraBal",c[c.ToAuraBal=1]="ToAuraBal",c),n6="0xba100000625a3754423978a60c9317c58a424e3d",n5="0x616e8BfA43F920657B3497DBf40D6b1A02D4608d",n1=[n6,eB[1].wrapped],n3=new eb(1,n5,18),n4="0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014",n8="0x5c6ee304399dbdb9c8ef030ab642b10820db8f56",n7=[n6,eB[1].wrapped];function n9(e){let{tokenIn:t,tokenOut:n,kind:a,swapAmount:i}=e;return function(e){if(0!==e)throw Error("auraBal Swap: Must be SwapKind GivenIn.");return!0}(a)&&function(e,t){if(!e.isSameAddress(t.token.address))throw Error("auraBal Swap: tokenIn and swapAmount address must match.");return!0}(t,i)&&function(e,t,n){if(!(1===e.chainId&&1===t.chainId&&n.token.chainId))throw Error("auraBal Swap: Must be mainnet.");return!0}(t,n,i)&&function(e,t){let n=n3.isSameAddress(e.address),a=n3.isSameAddress(t.address);if(n&&a)throw Error("auraBal Swap: Both tokens are auraBal");if(!n&&!a)throw Error("auraBal Swap: Must have tokenIn or tokenOut as auraBal.");if(n){if(!ae(t))throw Error("auraBal Swap: Unsupported tokenOut")}else if(a&&!ae(e))throw Error("auraBal Swap: Unsupported tokenIn");return!0}(t,n)}function ae(e){return n1.some(t=>e.isSameAddress(t))}function at(e,t){return e.map(e=>eB[t].wrapped.toLowerCase()===e.toLowerCase()?ef:e)}function an(e,t,n,a){let i=n7.findIndex(t=>e.isSameAddress(t));if(-1===i)throw Error(`Join token not in BAL-WETH pool ${e.address}`);let r=a&&e.isUnderlyingEqual(eB[1]),p=Array(n7.length).fill(0n);p[i]=n;let s=(0,_.E)((0,Q.n)("uint256, uint256[], uint256"),[1n,p,0n]),o={assets:r?at(n7,1):n7,maxAmountsIn:p,userData:s,fromInternalBalance:!1},u=tU.toChainedReference(1n,!1),y=r?n:0n;return{joinPoolData:(0,M.R)({abi:er,functionName:"joinPool",args:[n4,1,t,ev[1],o,y,u]}),joinPoolOpRef:u,value:y}}function aa(e,t,n,a,i,r,p,s){let o=tU.toChainedReference(2n,s);return{swapData:(0,M.R)({abi:er,functionName:"swap",args:[{poolId:"0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249",kind:0,assetIn:t,assetOut:n,amount:e,userData:"0x"},{sender:a,recipient:i,fromInternalBalance:!1,toInternalBalance:!1},r,ew,p,o]}),swapOpRef:o}}async function ai(e){let{swapToken:t,inputAmount:n,kind:a,client:i}=e,{joinPoolData:r,joinPoolOpRef:p}=an(t,F.DR,n.amount,!1),{swapData:s,swapOpRef:o}=aa(p,n8,n5,F.DR,F.DR,0n,0n,!0),u=tU.encodePeekChainedReferenceValue(o),y=(0,M.R)({abi:ea,functionName:"vaultActionsQueryMulticall",args:[[r,s,u]]}),{data:d}=await i.call({...eI,to:ev[1],data:y}),l=(0,G.k)({abi:ea,functionName:"vaultActionsQueryMulticall",data:d}),m=(0,X.r)([{type:"uint256"}],l[l.length-1])[0];return{inputAmount:eX.fromRawAmount(t,n.amount),expectedAmountOut:eX.fromRawAmount(n3,m),kind:a}}function ar(e,t,n,a,i){let r=n7.findIndex(t=>e.isSameAddress(t));if(-1===r)throw Error(`exit token not in BAL-WETH pool ${e.address}`);let p=Array(n7.length).fill(0n);p[r]=a;let s=(0,_.E)((0,Q.n)("uint256, uint256, uint256"),[0n,n,BigInt(r)]),o={assets:i?at(n7,1):n7,minAmountsOut:p,userData:s,toInternalBalance:!1},u=tU.toChainedReference(1n);return{exitPoolData:(0,M.R)({abi:er,functionName:"exitPool",args:[n4,1,ev[1],t,o,[{key:u,index:BigInt(r)}]]}),exitPoolOpRef:u}}async function ap(e){let{swapToken:t,inputAmount:n,kind:a,client:i}=e,{swapData:r,swapOpRef:p}=aa(n.amount,n5,n8,F.DR,F.DR,0n,0n,!0),{exitPoolData:s,exitPoolOpRef:o}=ar(t,F.DR,p,0n,!1),u=tU.encodePeekChainedReferenceValue(o),y=(0,M.R)({abi:ea,functionName:"vaultActionsQueryMulticall",args:[[r,s,u]]}),{data:d}=await i.call({...eI,to:ev[1],data:y}),l=(0,G.k)({abi:ea,functionName:"vaultActionsQueryMulticall",data:d}),m=(0,X.r)([{type:"uint256"}],l[l.length-1])[0];return{inputAmount:eX.fromRawAmount(n3,n.amount),expectedAmountOut:eX.fromRawAmount(t,m),kind:a}}var as=class{constructor(e){ee(this,"client"),this.client=(0,q.v)({transport:(0,L.d)(e),chain:ek[1]})}isAuraBalSwap(e){return n9(e)}async query(e){let t=function(e){let{tokenIn:t,tokenOut:n,swapAmount:a}=e;if(!n9(e))throw Error("Not A Valid AuraBal Swap");let i=n3.isSameAddress(t.address);return{kind:i?0:1,swapToken:i?n:t,inputAmount:a}}(e);return 1===t.kind?ai({...t,client:this.client}):ap({...t,client:this.client})}buildCall(e){let t;let n=np(e.slippage,0,e.queryOutput.expectedAmountOut),a=0n;if(1===e.queryOutput.kind){let i=function(e,t,n,a,i,r){let{joinPoolData:p,joinPoolOpRef:s,value:o}=an(a,e,t,i),u=tU.encodeApproveVault(n8,s),{swapData:y}=aa(s,n8,n5,ev[1],e,n,0n,!0),d=[p,u,y];return void 0!==r&&d.unshift(tU.encodeSetRelayerApproval(ev[1],!0,r)),{callData:(0,M.R)({abi:ea,functionName:"multicall",args:[d]}),value:o}}(e.user,e.queryOutput.inputAmount.amount,n.amount,e.queryOutput.inputAmount.token,e.wethIsEth,e.relayerApprovalSignature);t=i.callData,a=i.value}else t=function(e,t,n,a,i,r){let{swapData:p,swapOpRef:s}=aa(t,n5,n8,e,ev[1],0n,0n,!1),o=tU.encodeApproveVault(n8,s),{exitPoolData:u}=ar(a,e,s,n,i),y=[p,o,u];return void 0!==r&&y.unshift(tU.encodeSetRelayerApproval(ev[1],!0,r)),(0,M.R)({abi:ea,functionName:"multicall",args:[y]})}(e.user,e.queryOutput.inputAmount.amount,n.amount,e.queryOutput.expectedAmountOut.token,e.wethIsEth,e.relayerApprovalSignature);return{to:ev[1],callData:t,value:a,minAmountOut:n}}}}}]);